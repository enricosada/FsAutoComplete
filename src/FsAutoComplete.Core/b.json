{
    "values": [
        {
            "distance": 0,
            "api": {
                "name": {
                    "id": "Abs",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the absolute value of a 32-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.abs?view=netframework-4.7#System_Math_Abs_System_Int32_"
            }
        },
        {
            "distance": 0,
            "api": {
                "name": {
                    "id": "CollectionCount",
                    "class_name": "GC",
                    "namespace": "System.GC"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "generation:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the number of times garbage collection has occurred for the specified generation of objects.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.gc.collectioncount?view=netframework-4.7#System_GC_CollectionCount_System_Int32_"
            }
        },
        {
            "distance": 0,
            "api": {
                "name": {
                    "id": "CreateMask",
                    "class_name": "BitVector32",
                    "namespace": "System.Collections.Specialized.BitVector32"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "previous:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a  that is set up as bit flags.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.bitvector32.createmask?view=netframework-4.7#System_Collections_Specialized_BitVector32_CreateMask_System_Int32_"
            }
        },
        {
            "distance": 0,
            "api": {
                "name": {
                    "id": "HostToNetworkOrder",
                    "class_name": "IPAddress",
                    "namespace": "System.Net.IPAddress"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "host:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Converts an integer value from host byte order to network byte order.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress.hosttonetworkorder?view=netframework-4.7#System_Net_IPAddress_HostToNetworkOrder_System_Int32_"
            }
        },
        {
            "distance": 0,
            "api": {
                "name": {
                    "id": "NetworkToHostOrder",
                    "class_name": "IPAddress",
                    "namespace": "System.Net.IPAddress"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "network:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Converts an integer value from network byte order to host byte order.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress.networktohostorder?view=netframework-4.7#System_Net_IPAddress_NetworkToHostOrder_System_Int32_"
            }
        },
        {
            "distance": 0,
            "api": {
                "name": {
                    "id": "Sign",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns an integer that indicates the sign of a 32-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.sign?view=netframework-4.7#System_Math_Sign_System_Int32_"
            }
        },
        {
            "distance": 0,
            "api": {
                "name": {
                    "id": "ToInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the specified 32-bit signed integer; no actual conversion is performed.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint32?view=netframework-4.7#System_Convert_ToInt32_System_Int32_"
            }
        },
        {
            "distance": 0,
            "api": {
                "name": {
                    "id": "fromZ",
                    "class_name": "Line",
                    "namespace": "Microsoft.FSharp.Compiler.Range.Line"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "Line0",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "Convert a line number from zero-based line counting (used by Visual Studio) to one-based line counting (used internally in the F# compiler and in F# error messages)",
                "link": ""
            }
        },
        {
            "distance": 0,
            "api": {
                "name": {
                    "id": "toZ",
                    "class_name": "Line",
                    "namespace": "Microsoft.FSharp.Compiler.Range.Line"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "Line0",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "Convert a line number from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)",
                "link": ""
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "( >>>& )",
                    "class_name": "Library",
                    "namespace": "Microsoft.FSharp.Compiler.AbstractIL.Internal.Library"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "int32",
                        "color_id": 0
                    },
                    {
                        "name": " -> n:int32 -> ",
                        "color_id": null
                    },
                    {
                        "name": "int32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "Clone<'T>",
                    "class_name": "FsPickler",
                    "namespace": "MBrace.FsPickler.FsPickler"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * ?pickler:Pickler<'T> * ?streamingContext:StreamingContext -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FsPickler",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "Int32",
                    "namespace": "System.Int32"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:obj -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified object and returns an indication of their relative values.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.int32.compareto?view=netframework-4.7#System_Int32_CompareTo_System_Object_"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "Int32",
                    "namespace": "System.Int32"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified 32-bit signed integer and returns an indication of their relative values.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.int32.compareto?view=netframework-4.7#System_Int32_CompareTo_System_Int32_"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "CorrectIdentifierToken",
                    "class_name": "QuickParse",
                    "namespace": "Microsoft.FSharp.Compiler.QuickParse"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "tokenText:string -> tokenTag:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "Create<'T1>",
                    "class_name": "Tuple",
                    "namespace": "System.Tuple"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "item1:",
                        "color_id": null
                    },
                    {
                        "name": "'T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T1",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Creates a new 1-tuple, or singleton.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.tuple.create?view=netframework-4.7#System_Tuple_Create__1___0_"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "Create<'T1>",
                    "class_name": "ValueTuple",
                    "namespace": "System.ValueTuple"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "item1:",
                        "color_id": null
                    },
                    {
                        "name": "'T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "struct ('T1)",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Creates a new value tuple with 1 component (a singleton).",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.valuetuple.create?view=netframework-4.7#System_ValueTuple_Create__1___0_"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "Decrement",
                    "class_name": "Interlocked",
                    "namespace": "System.Threading.Interlocked"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Decrements a specified variable and stores the result, as an atomic operation.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked.decrement?view=netframework-4.7#System_Threading_Interlocked_Decrement_System_Int32__"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "FromInt32<'T>",
                    "class_name": "NumericLiteralI",
                    "namespace": "Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int32",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Provides a default implementations of F# numeric literal syntax  for literals of the form 'dddI'",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/numericliterali.fromint32%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "GetHashCode",
                    "class_name": "Int32",
                    "namespace": "System.Int32"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the hash code for this instance.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.int32.gethashcode?view=netframework-4.7#System_Int32_GetHashCode"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "Increment",
                    "class_name": "Interlocked",
                    "namespace": "System.Threading.Interlocked"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Increments a specified variable and stores the result, as an atomic operation.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked.increment?view=netframework-4.7#System_Threading_Interlocked_Increment_System_Int32__"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "MemberInitializationHelper<'T>",
                    "class_name": "LeafExpressionConverter",
                    "namespace": "Microsoft.FSharp.Linq.RuntimeHelpers.LeafExpressionConverter"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "When used in a quotation, this function indicates a specific conversion should be performed when converting the quotation to a LINQ expression.  This function should not be called directly.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/leafexpressionconverter.memberinitializationhelper%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "NewAnonymousObjectHelper<'T>",
                    "class_name": "LeafExpressionConverter",
                    "namespace": "Microsoft.FSharp.Linq.RuntimeHelpers.LeafExpressionConverter"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "When used in a quotation, this function indicates a specific conversion should be performed when converting the quotation to a LINQ expression.  This function should not be called directly.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/leafexpressionconverter.newanonymousobjecthelper%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "OldValue<'T>",
                    "class_name": "Contract",
                    "namespace": "System.Diagnostics.Contracts.Contract"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Represents values as they were at the start of a method or property.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.contract.oldvalue?view=netframework-4.7#System_Diagnostics_Contracts_Contract_OldValue__1___0_"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "Read",
                    "class_name": "Volatile",
                    "namespace": "System.Threading.Volatile"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.volatile.read?view=netframework-4.7#System_Threading_Volatile_Read_System_Int32__"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "SizeOf<'T>",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "structure:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "[Supported in the .NET Framework 4.5.1 and later versions] Returns the unmanaged size of an object of a specified type in bytes.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.sizeof?view=netframework-4.7#System_Runtime_InteropServices_Marshal_SizeOf__1___0_"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "ToTuple<'T1>",
                    "class_name": "TupleExtensions",
                    "namespace": "System.TupleExtensions"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "(struct ('T1))",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T1",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts an instance of the  structure to an instance of the   class.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.tupleextensions.totuple?view=netframework-4.7#System_TupleExtensions_ToTuple__1__"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "ToValueTuple<'T1>",
                    "class_name": "TupleExtensions",
                    "namespace": "System.TupleExtensions"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "('T1)",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "struct ('T1)",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts an instance of the  class to an instance of the   structure.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.tupleextensions.tovaluetuple?view=netframework-4.7#System_TupleExtensions_ToValueTuple__1__"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "VolatileRead",
                    "class_name": "Thread",
                    "namespace": "System.Threading.Thread"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "address:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.volatileread?view=netframework-4.7#System_Threading_Thread_VolatileRead_System_Int32__"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "enum<^U>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int32",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "^U",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^U : enum",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to a particular enum type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.enum%5b%5eu%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "exit<'T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "exitcode:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Exit the current hardware isolated process, if security settings permit, otherwise raise an exception. Calls System.Environment.Exit.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.exit%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "hash<'T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "obj:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : equality",
                "assembly": "FSharp.Core",
                "xml_doc": "A generic hash function, designed to return equal hash values for items that are  equal according to the \"=\" operator. By default it will use structural hashing for F# union, record and tuple types, hashing the complete contents of the  type. The exact behaviour of the function can be adjusted on a  type-by-type basis by implementing GetHashCode for each type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.hash%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "hash<'T>",
                    "class_name": "NonStructuralComparison",
                    "namespace": "Microsoft.FSharp.Core.Operators.NonStructuralComparison"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : equality",
                "assembly": "FSharp.Core",
                "xml_doc": "Calls GetHashCode() on the value",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/nonstructuralcomparison.hash%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "hash<'T>",
                    "class_name": "Unchecked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Unchecked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Perform generic hashing on a value where the type of the value is not  statically required to satisfy the 'equality' constraint.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/unchecked.hash%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "id<'T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "The identity function",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.id%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "limitedHash<'T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "limit:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> obj:'T -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : equality",
                "assembly": "FSharp.Core",
                "xml_doc": "A generic hash function. This function has the same behaviour as 'hash',  however the default structural hashing for F# union, record and tuple  types stops when the given limit of nodes is reached. The exact behaviour of  the function can be adjusted on a type-by-type basis by implementing  GetHashCode for each type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.limitedhash%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "next",
                    "class_name": "ThreadSafeRandom",
                    "namespace": "Suave.Utils.ThreadSafeRandom"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "minInclusive:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> maxExclusive:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "generate a new random int32 value bounded to [minInclusive; maxExclusive)",
                "link": ""
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "read<'Env>",
                    "class_name": "Reader",
                    "namespace": "ExtCore.Control.Reader"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "env:",
                        "color_id": null
                    },
                    {
                        "name": "'Env",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'Env",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 1,
            "api": {
                "name": {
                    "id": "sign<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (member get_Sign : unit -> int)",
                "assembly": "FSharp.Core",
                "xml_doc": "Sign of the given number",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.sign%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "( ~+ )<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_UnaryPlus : ^T -> ^T)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded prefix-plus operator",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-zp-%5d%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "( ~- )<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "n:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_UnaryNegation : ^T -> ^T)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded unary negation.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-z--%5d%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "( ~- )<^T>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_UnaryNegation : ^T -> ^T)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded unary negation (checks for overflow)",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.%5b-z--%5d%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "( ~~~ )<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_LogicalNot : ^T -> ^T)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded bitwise-NOT operator",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-zzz-%5d%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "Breakable",
                    "class_name": "Joint",
                    "namespace": "Internal.Utilities.StructuredFormat.Joint"
                },
                "kind": "union case",
                "signature": [
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "Joint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "Broken",
                    "class_name": "Joint",
                    "namespace": "Internal.Utilities.StructuredFormat.Joint"
                },
                "kind": "union case",
                "signature": [
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "Joint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "ConvertToUtf32",
                    "class_name": "Char",
                    "namespace": "System.Char"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "s:string * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.char.converttoutf32?view=netframework-4.7#System_Char_ConvertToUtf32_System_String_System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "CreateWrapperOfType<'T, 'TWrapper>",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "o:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TWrapper",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "[Supported in the .NET Framework 4.5.1 and later versions] Wraps the specified COM object in an object of the specified type.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.createwrapperoftype?view=netframework-4.7#System_Runtime_InteropServices_Marshal_CreateWrapperOfType__2___0_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "DaysInMonth",
                    "class_name": "DateTime",
                    "namespace": "System.DateTime"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "year:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " * month:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the number of days in the specified month and year.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.datetime.daysinmonth?view=netframework-4.7#System_DateTime_DaysInMonth_System_Int32_System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "GetDecimalDigitValue",
                    "class_name": "CharUnicodeInfo",
                    "namespace": "System.Globalization.CharUnicodeInfo"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "s:string * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Gets the decimal digit value of the numeric character at the specified index of the specified string.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.globalization.charunicodeinfo.getdecimaldigitvalue?view=netframework-4.7#System_Globalization_CharUnicodeInfo_GetDecimalDigitValue_System_String_System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "GetDigitValue",
                    "class_name": "CharUnicodeInfo",
                    "namespace": "System.Globalization.CharUnicodeInfo"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "s:string * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Gets the digit value of the numeric character at the specified index of the specified string.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.globalization.charunicodeinfo.getdigitvalue?view=netframework-4.7#System_Globalization_CharUnicodeInfo_GetDigitValue_System_String_System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "Max",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "val1:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " * val2:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the larger of two 32-bit signed integers.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.max?view=netframework-4.7#System_Math_Max_System_Int32_System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "Min",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "val1:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " * val2:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the smaller of two 32-bit signed integers.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.min?view=netframework-4.7#System_Math_Min_System_Int32_System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "ReadInt32",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:obj * ofs:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads a 32-bit signed integer at a given offset from unmanaged memory.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.readint32?view=netframework-4.7#System_Runtime_InteropServices_Marshal_ReadInt32_System_Object_System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "Sign",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns an integer that indicates the sign of a 64-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.sign?view=netframework-4.7#System_Math_Sign_System_Int64_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "Sign",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns an integer that indicates the sign of a 16-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.sign?view=netframework-4.7#System_Math_Sign_System_Int16_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "ToInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint16?view=netframework-4.7#System_Convert_ToInt16_System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "ToInt32",
                    "class_name": "BitConverter",
                    "namespace": "System.BitConverter"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:byte[] * startIndex:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.bitconverter.toint32?view=netframework-4.7#System_BitConverter_ToInt32_System_Byte___System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "ToInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint32?view=netframework-4.7#System_Convert_ToInt32_System_Int16_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "ToInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:string * fromBase:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint32?view=netframework-4.7#System_Convert_ToInt32_System_String_System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "ToInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint32?view=netframework-4.7#System_Convert_ToInt32_System_Int64_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "ToInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint64?view=netframework-4.7#System_Convert_ToInt64_System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "ValueAtReturn<'T>",
                    "class_name": "Contract",
                    "namespace": "System.Diagnostics.Contracts.Contract"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "byref<'T>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Represents the final (output) value of an  parameter when returning from a method.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.contract.valueatreturn?view=netframework-4.7#System_Diagnostics_Contracts_Contract_ValueAtReturn__1___0__"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "WaitAny",
                    "class_name": "Task",
                    "namespace": "System.Threading.Tasks.Task"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "tasks:Task[] * millisecondsTimeout:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Waits for any of the provided  objects to complete execution within a specified number of milliseconds.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitany?view=netframework-4.7#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "WaitAny",
                    "class_name": "WaitHandle",
                    "namespace": "System.Threading.WaitHandle"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "waitHandles:WaitHandle[] * millisecondsTimeout:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.waithandle.waitany?view=netframework-4.7#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___System_Int32_"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "appFunOpt<'a>",
                    "class_name": "Ast",
                    "namespace": "Microsoft.FSharp.Compiler.Ast"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "funOpt:option<'a -> 'a> -> x:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "bytesToBuffer",
                    "class_name": "ASCII",
                    "namespace": "Suave.Utils.ASCII"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "s:string -> buff:byte[] -> offset:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "Get the ASCII-encoding of the string and writes it to the passed `buff` at `offset`.",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "cnst<'t, 'u>",
                    "class_name": "WebPart",
                    "namespace": "Suave.WebPart"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "'t",
                        "color_id": 0
                    },
                    {
                        "name": " -> 'u -> ",
                        "color_id": null
                    },
                    {
                        "name": "'t",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "The constant function, which returns its constant, no matter its input. - theorem: identity = (warbler cnst) (warbler cnst) x = cnst x x = fun _ -> x",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "compare<'T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "e1:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> e2:'T -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "FSharp.Core",
                "xml_doc": "Generic comparison.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.compare%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "compare<'T>",
                    "class_name": "Unchecked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Unchecked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> 'T -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Perform generic comparison on two values where the type of the values is not  statically required to have the 'comparison' constraint.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/unchecked.compare%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "ct<'a, 'b>",
                    "class_name": "YoLo",
                    "namespace": "YoLo"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> 'b -> ",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "defaultArg<'T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "arg:option<'T> -> defaultValue:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Used to specify a default value for an optional argument in the implementation of a function",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.defaultarg%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "defaultValue<'T>",
                    "class_name": "Option",
                    "namespace": "Microsoft.FSharp.Core.Option"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> option:option<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Gets the value of the option if the option is Some, otherwise returns the specified default value.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/option.defaultvalue%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "execute<'State, 'T>",
                    "class_name": "State",
                    "namespace": "ExtCore.Control.State"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "stateFunc:StateFunc<'State, 'T> -> initialState:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "fill<'T>",
                    "class_name": "Option",
                    "namespace": "ExtCore.Option"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "defaultValue:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> value:option<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "find<'T>",
                    "class_name": "IntBimap",
                    "namespace": "ExtCore.Collections.IntBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:IntBimap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "find<'T>",
                    "class_name": "IntMap",
                    "namespace": "ExtCore.Collections.IntMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> map:IntMap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "findValue<'T>",
                    "class_name": "IntBimap",
                    "namespace": "ExtCore.Collections.IntBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:IntBimap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "fst<'T1, 'T2>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "tuple:",
                        "color_id": null
                    },
                    {
                        "name": "('T1 * 'T2)",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T1",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Return the first element of a tuple, fst (a,b) = a.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.fst%5b%27t1%2c%27t2%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "get<'T>",
                    "class_name": "ArrayView",
                    "namespace": "ExtCore.Collections.ArrayView"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "view:ArrayView<'T> -> index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "get<'T>",
                    "class_name": "ResizeArray",
                    "namespace": "ExtCore.Collections.ResizeArray"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "resizeArray:ResizeArray<'T> -> index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "get<'T>",
                    "class_name": "Vector",
                    "namespace": "ExtCore.Collections.Vector"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "vec:vector<'T> -> index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "get<'T>",
                    "class_name": "Array",
                    "namespace": "Microsoft.FSharp.Collections.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "array:'T[] -> index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Gets an element from an array.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/array.get%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "get<'T>",
                    "class_name": "NativePtr",
                    "namespace": "Microsoft.FSharp.NativeInterop.NativePtr"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "address:nativeptr<'T> -> index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : unmanaged",
                "assembly": "FSharp.Core",
                "xml_doc": "Dereferences the typed native pointer computed by adding index * sizeof<'T> to the  given input pointer.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/nativeptr.get%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "getState<'State, 'a>",
                    "class_name": "StatefulChoice",
                    "namespace": "ExtCore.Control.StatefulChoice"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "Choice<'State, 'a> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "getState<'State>",
                    "class_name": "State",
                    "namespace": "ExtCore.Control.State"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "hashOn<'a, 'b>",
                    "class_name": "Comparisons",
                    "namespace": "YoLo.Comparisons"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a -> 'b) -> x:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'b : equality",
                "assembly": "Suave",
                "xml_doc": "hash x on the selected value from f",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "int32<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> int32)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to signed 32-bit integer. This is a direct conversion for all  primitive numeric types. For strings, the input is converted using Int32.Parse()   with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.int32%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "int32<^T>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> int32)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to int32. This is a direct, checked conversion for all  primitive numeric types. For strings, the input is converted using System.Int32.Parse()  with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.int32%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "int<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> int)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to signed 32-bit integer. This is a direct conversion for all  primitive numeric types. For strings, the input is converted using Int32.Parse()   with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.int%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "int<^T>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> int)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to int. This is a direct, checked conversion for all  primitive numeric types. For strings, the input is converted using System.Int32.Parse()  with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.int%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "item<'T>",
                    "class_name": "Array",
                    "namespace": "Microsoft.FSharp.Collections.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> array:'T[] -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Gets an element from an array.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/array.item%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "item<'T>",
                    "class_name": "List",
                    "namespace": "Microsoft.FSharp.Collections.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> list:list<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Indexes into the list. The first element has index 0.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/list.item%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "item<'T>",
                    "class_name": "Seq",
                    "namespace": "Microsoft.FSharp.Collections.Seq"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> source:seq<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Computes the element at the specified index in the collection.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/seq.item%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "max<'T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "e1:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> e2:'T -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "FSharp.Core",
                "xml_doc": "Maximum based on generic comparison",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.max%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "min<'T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "e1:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> e2:'T -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "FSharp.Core",
                "xml_doc": "Minimum based on generic comparison",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.min%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "nth<'T>",
                    "class_name": "PSeq",
                    "namespace": "FSharp.Collections.ParallelSeq.PSeq"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> source:seq<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Collections.ParallelSeq",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "nth<'T>",
                    "class_name": "List",
                    "namespace": "Microsoft.FSharp.Collections.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "list:list<'T> -> index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Indexes into the list. The first element has index 0.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/list.nth%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "nth<'T>",
                    "class_name": "Seq",
                    "namespace": "Microsoft.FSharp.Collections.Seq"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> source:seq<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Computes the nth element in the collection.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/seq.nth%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "orDefault<'a, 'b>",
                    "class_name": "Choice",
                    "namespace": "Suave.Utils.Choice"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "onMissing:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> _arg1:Choice<'a, 'b> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "protectAssemblyExploration<'a>",
                    "class_name": "ErrorLogger",
                    "namespace": "Microsoft.FSharp.Compiler.ErrorLogger"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "dflt:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> f:(unit -> 'a) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "runWithRetries<'a>",
                    "class_name": "TaskRunner",
                    "namespace": "Fake.Core.TaskRunner"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:(unit -> 'a) -> retries:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Fake.Core.Tasks",
                "xml_doc": "Retries the given function until a retry limit is reached or the function succeeds without exception. ## Parameters  - `f` - This function will be started.  - `retries` - A retry limit.",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "setFakeVar<'a>",
                    "class_name": "Context",
                    "namespace": "Fake.Core.Context"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "name:string -> v:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Fake.Core.Context",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "tap<'T>",
                    "class_name": "Operators",
                    "namespace": "ExtCore.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:('T -> unit) -> value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 2,
            "api": {
                "name": {
                    "id": "tapAssert<'T>",
                    "class_name": "Operators",
                    "namespace": "ExtCore.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "asserter:('T -> option<string>) -> value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "( &&& )<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_BitwiseAnd : ^T * ^T -> ^T)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded bitwise-AND operator",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-nnn-%5d%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "( <<< )<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> shift:int32 -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_LeftShift : ^T * int32 -> ^T)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded byte-shift left operator by a specified number of bits",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-%5b%5b%5b-%5d%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "( <| )<'T, 'U>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "func:('T -> 'U) -> arg1:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Apply a function to a value, the value being on the right, the function on the left",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-%5bh-%5d%5b%27t%2c%27u%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "( >>> )<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> shift:int32 -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_RightShift : ^T * int32 -> ^T)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded byte-shift right operator by a specified number of bits",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-%5d%5d%5d-%5d%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "( ? )<'a, 'b>",
                    "class_name": "TargetOperators",
                    "namespace": "Fake.Core.TargetOperators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a -> 'b) -> s:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'b",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Fake.Core.Target",
                "xml_doc": "Allows to use Tokens instead of strings",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "( ^^^ )<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_ExclusiveOr : ^T * ^T -> ^T)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded bitwise-XOR operator",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-%5e%5e%5e-%5d%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "( |> )<'T1, 'U>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "arg:",
                        "color_id": null
                    },
                    {
                        "name": "'T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> func:('T1 -> 'U) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Apply a function to a value, the value being on the left, the function on the right",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-h%5d-%5d%5b%27t1%2c%27u%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "( ||| )<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_BitwiseOr : ^T * ^T -> ^T)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded bitwise-OR operator",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-hhh-%5d%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "Add",
                    "class_name": "Interlocked",
                    "namespace": "System.Threading.Interlocked"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location1:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int>",
                        "color_id": 0
                    },
                    {
                        "name": " * value:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked.add?view=netframework-4.7#System_Threading_Interlocked_Add_System_Int32__System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "AddRef",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "pUnk:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Increments the reference count on the specified interface.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.addref?view=netframework-4.7#System_Runtime_InteropServices_Marshal_AddRef_System_IntPtr_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "AddToAny",
                    "class_name": "BlockingCollection<'T>",
                    "namespace": "System.Collections.Concurrent.BlockingCollection<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "collections:BlockingCollection<'T>[] * item:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Adds the specified item to any one of the specified  instances.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.addtoany?view=netframework-4.7#System_Collections_Concurrent_BlockingCollection_1_AddToAny_System_Collections_Concurrent_BlockingCollection__0_____0_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "AllocCoTaskMem",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "cb:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Allocates a block of memory of specified size from the COM task memory allocator.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.alloccotaskmem?view=netframework-4.7#System_Runtime_InteropServices_Marshal_AllocCoTaskMem_System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "AllocHGlobal",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "cb:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Allocates memory from the unmanaged memory of the process by using the specified number of bytes.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.allochglobal?view=netframework-4.7#System_Runtime_InteropServices_Marshal_AllocHGlobal_System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "BinarySearch<'T>",
                    "class_name": "Array",
                    "namespace": "System.Array"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "array:'T[] * value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Searches an entire one-dimensional sorted array for a specific element, using the  generic interface implemented by each element of the  and by the specified object.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=netframework-4.7#System_Array_BinarySearch__1___0_____0_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "Int16",
                    "namespace": "System.Int16"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:int16 -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified 16-bit signed integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified 16-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.int16.compareto?view=netframework-4.7#System_Int16_CompareTo_System_Int16_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "Int16",
                    "namespace": "System.Int16"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:obj -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the object.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.int16.compareto?view=netframework-4.7#System_Int16_CompareTo_System_Object_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "Int64",
                    "namespace": "System.Int64"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:obj -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified object and returns an indication of their relative values.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.int64.compareto?view=netframework-4.7#System_Int64_CompareTo_System_Object_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "Int64",
                    "namespace": "System.Int64"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:int64 -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified 64-bit signed integer and returns an indication of their relative values.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.int64.compareto?view=netframework-4.7#System_Int64_CompareTo_System_Int64_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ComputeSize<'T>",
                    "class_name": "FsPickler",
                    "namespace": "MBrace.FsPickler.FsPickler"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * ?pickler:Pickler<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FsPickler",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "Count",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "instance property with get",
                "signature": [
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "CreateTimer",
                    "class_name": "SystemEvents",
                    "namespace": "Microsoft.Win32.SystemEvents"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "interval:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Creates a new window timer associated with the system events window.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/microsoft.win32.systemevents.createtimer?view=netframework-4.7#Microsoft_Win32_SystemEvents_CreateTimer_System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "DeserializeAnonymousType<'T>",
                    "class_name": "JsonConvert",
                    "namespace": "Newtonsoft.Json.JsonConvert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:string * anonymousTypeObject:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Newtonsoft.Json",
                "xml_doc": "Deserializes the JSON to the given anonymous type.",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "DivRem",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "a:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " * b:int * result:byref<int> -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.divrem?view=netframework-4.7#System_Math_DivRem_System_Int32_System_Int32_System_Int32__"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ElementAt<'TSource>",
                    "class_name": "Enumerable",
                    "namespace": "System.Linq.Enumerable"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "source:IEnumerable<'TSource> * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TSource",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System.Core",
                "xml_doc": "Returns the element at a specified index in a sequence.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.elementat?view=netframework-4.7#System_Linq_Enumerable_ElementAt__1_System_Collections_Generic_IEnumerable___0__System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ElementAt<'TSource>",
                    "class_name": "ParallelEnumerable",
                    "namespace": "System.Linq.ParallelEnumerable"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "source:ParallelQuery<'TSource> * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TSource",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System.Core",
                "xml_doc": "Returns the element at a specified index in a parallel sequence.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.linq.parallelenumerable.elementat?view=netframework-4.7#System_Linq_ParallelEnumerable_ElementAt__1_System_Linq_ParallelQuery___0__System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ElementAt<'TSource>",
                    "class_name": "Queryable",
                    "namespace": "System.Linq.Queryable"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "source:IQueryable<'TSource> * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TSource",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System.Core",
                "xml_doc": "Returns the element at a specified index in a sequence.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.linq.queryable.elementat?view=netframework-4.7#System_Linq_Queryable_ElementAt__1_System_Linq_IQueryable___0__System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ElementAtOrDefault<'TSource>",
                    "class_name": "Enumerable",
                    "namespace": "System.Linq.Enumerable"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "source:IEnumerable<'TSource> * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TSource",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System.Core",
                "xml_doc": "Returns the element at a specified index in a sequence or a default value if the index is out of range.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.elementatordefault?view=netframework-4.7#System_Linq_Enumerable_ElementAtOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ElementAtOrDefault<'TSource>",
                    "class_name": "ParallelEnumerable",
                    "namespace": "System.Linq.ParallelEnumerable"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "source:ParallelQuery<'TSource> * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TSource",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System.Core",
                "xml_doc": "Returns the element at a specified index in a parallel sequence or a default value if the index is out of range.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.linq.parallelenumerable.elementatordefault?view=netframework-4.7#System_Linq_ParallelEnumerable_ElementAtOrDefault__1_System_Linq_ParallelQuery___0__System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ElementAtOrDefault<'TSource>",
                    "class_name": "Queryable",
                    "namespace": "System.Linq.Queryable"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "source:IQueryable<'TSource> * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TSource",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System.Core",
                "xml_doc": "Returns the element at a specified index in a sequence or a default value if the index is out of range.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.linq.queryable.elementatordefault?view=netframework-4.7#System_Linq_Queryable_ElementAtOrDefault__1_System_Linq_IQueryable___0__System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "Exchange",
                    "class_name": "Interlocked",
                    "namespace": "System.Threading.Interlocked"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location1:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int>",
                        "color_id": 0
                    },
                    {
                        "name": " * value:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked.exchange?view=netframework-4.7#System_Threading_Interlocked_Exchange_System_Int32__System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "FindIndex<'T>",
                    "class_name": "Array",
                    "namespace": "System.Array"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "array:'T[] * startIndex:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " * match:Predicate<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the  that extends from the specified index to the last element.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.array.findindex?view=netframework-4.7#System_Array_FindIndex__1___0___System_Int32_System_Predicate___0__"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "FindLastIndex<'T>",
                    "class_name": "Array",
                    "namespace": "System.Array"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "array:'T[] * startIndex:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " * match:Predicate<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the  that extends from the first element to the specified index.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.array.findlastindex?view=netframework-4.7#System_Array_FindLastIndex__1___0___System_Int32_System_Predicate___0__"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "FromInt64<'T>",
                    "class_name": "NumericLiteralI",
                    "namespace": "Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Provides a default implementations of F# numeric literal syntax  for literals of the form 'dddI'",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/numericliterali.fromint64%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "GetHashCode",
                    "class_name": "Int16",
                    "namespace": "System.Int16"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the hash code for this instance.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.int16.gethashcode?view=netframework-4.7#System_Int16_GetHashCode"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "GetHashCode",
                    "class_name": "Int64",
                    "namespace": "System.Int64"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the hash code for this instance.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.int64.gethashcode?view=netframework-4.7#System_Int64_GetHashCode"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "IndexOf",
                    "class_name": "Array",
                    "namespace": "System.Array"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "array:Array * value:obj * startIndex:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=netframework-4.7#System_Array_IndexOf_System_Array_System_Object_System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "IndexOf<'T>",
                    "class_name": "Array",
                    "namespace": "System.Array"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "array:'T[] * value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=netframework-4.7#System_Array_IndexOf__1___0_____0_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "LastIndexOf",
                    "class_name": "Array",
                    "namespace": "System.Array"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "array:Array * value:obj * startIndex:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional  that extends from the first element to the specified index.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.array.lastindexof?view=netframework-4.7#System_Array_LastIndexOf_System_Array_System_Object_System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "LastIndexOf<'T>",
                    "class_name": "Array",
                    "namespace": "System.Array"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "array:'T[] * value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Searches for the specified object and returns the index of the last occurrence within the entire .",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.array.lastindexof?view=netframework-4.7#System_Array_LastIndexOf__1___0_____0_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "MaximumElement",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "instance property with get",
                "signature": [
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "MaximumElementSigned",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "instance property with get",
                "signature": [
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "MinimumElement",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "instance property with get",
                "signature": [
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "MinimumElementSigned",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "instance property with get",
                "signature": [
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ReadInt32",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads a 32-bit signed integer from unmanaged memory.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.readint32?view=netframework-4.7#System_Runtime_InteropServices_Marshal_ReadInt32_System_IntPtr_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "Release",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "pUnk:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Decrements the reference count on the specified interface.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.release?view=netframework-4.7#System_Runtime_InteropServices_Marshal_Release_System_IntPtr_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "Singleton",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "element:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ToInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint32?view=netframework-4.7#System_Convert_ToInt32_System_UInt64_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ToInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint32?view=netframework-4.7#System_Convert_ToInt32_System_UInt32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ToInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint32?view=netframework-4.7#System_Convert_ToInt32_System_UInt16_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ToTuple<'T1, 'T2>",
                    "class_name": "TupleExtensions",
                    "namespace": "System.TupleExtensions"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "(struct ('T1 * 'T2))",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T1 * 'T2",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts an instance of the  structure to an instance of the   class.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.tupleextensions.totuple?view=netframework-4.7#System_TupleExtensions_ToTuple__2__"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ToUInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint16?view=netframework-4.7#System_Convert_ToUInt16_System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ToUInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint32?view=netframework-4.7#System_Convert_ToUInt32_System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ToUInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint64?view=netframework-4.7#System_Convert_ToUInt64_System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "ToValueTuple<'T1, 'T2>",
                    "class_name": "TupleExtensions",
                    "namespace": "System.TupleExtensions"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "('T1 * 'T2)",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "struct ('T1 * 'T2)",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts an instance of the  class to an instance of the   structure.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.tupleextensions.tovaluetuple?view=netframework-4.7#System_TupleExtensions_ToValueTuple__2__"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "TryAddToAny",
                    "class_name": "BlockingCollection<'T>",
                    "namespace": "System.Collections.Concurrent.BlockingCollection<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "collections:BlockingCollection<'T>[] * item:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Tries to add the specified item to any one of the specified  instances.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.tryaddtoany?view=netframework-4.7#System_Collections_Concurrent_BlockingCollection_1_TryAddToAny_System_Collections_Concurrent_BlockingCollection__0_____0_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "WaitAny",
                    "class_name": "Task",
                    "namespace": "System.Threading.Tasks.Task"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "tasks:Task[] * millisecondsTimeout:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " * cancellationToken:CancellationToken -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Waits for any of the provided  objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitany?view=netframework-4.7#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Int32_System_Threading_CancellationToken_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "WaitAny",
                    "class_name": "WaitHandle",
                    "namespace": "System.Threading.WaitHandle"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "waitHandles:WaitHandle[] * millisecondsTimeout:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " * exitContext:bool -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.waithandle.waitany?view=netframework-4.7#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___System_Int32_System_Boolean_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "assoc<'d, 'e>",
                    "class_name": "List",
                    "namespace": "Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "'d",
                        "color_id": 0
                    },
                    {
                        "name": " -> l:list<'d * 'e> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'e",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'd : equality",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "compareOn<'T, 'a>",
                    "class_name": "Comparisons",
                    "namespace": "YoLo.Comparisons"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('T -> 'a) -> x:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> yobj:obj -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'a : comparison",
                "assembly": "Suave",
                "xml_doc": "compare x to yobj mapped on selected value from function f",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "count",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "set:",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "evaluate<'State, 'T>",
                    "class_name": "State",
                    "namespace": "ExtCore.Control.State"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "stateFunc:StateFunc<'State, 'T> -> initialState:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "find<'Key, 'T>",
                    "class_name": "Bimap",
                    "namespace": "ExtCore.Collections.Bimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "'Key",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:Bimap<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison and 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "find<'Key, 'T>",
                    "class_name": "Dict",
                    "namespace": "ExtCore.Collections.Dict"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "k:",
                        "color_id": null
                    },
                    {
                        "name": "'Key",
                        "color_id": 0
                    },
                    {
                        "name": " -> dictionary:dict<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "find<'Key, 'T>",
                    "class_name": "Safe",
                    "namespace": "ExtCore.Collections.Dict.Safe"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "'Key",
                        "color_id": 0
                    },
                    {
                        "name": " -> dict:dict<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "find<'Key, 'T>",
                    "class_name": "HashMap",
                    "namespace": "ExtCore.Collections.HashMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "'Key",
                        "color_id": 0
                    },
                    {
                        "name": " -> map:HashMap<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "find<'Key, 'T>",
                    "class_name": "Map",
                    "namespace": "Microsoft.FSharp.Collections.Map"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "'Key",
                        "color_id": 0
                    },
                    {
                        "name": " -> table:Map<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "FSharp.Core",
                "xml_doc": "Lookup an element in the map, raising KeyNotFoundException if no binding exists in the map.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/map.find%5b%27key%2c%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "findOrDefault<'T, 'Key>",
                    "class_name": "HashMap",
                    "namespace": "ExtCore.Collections.HashMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "defaultValue:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> key:'Key -> map:HashMap<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "findOrDefault<'T, 'Key>",
                    "class_name": "Map",
                    "namespace": "ExtCore.Collections.Map"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "defaultValue:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> key:'Key -> map:Map<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "findOrDefault<'T, 'Tag>",
                    "class_name": "LongTagMap",
                    "namespace": "ExtCore.Collections.LongTagMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "defaultValue:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> key:int64<'Tag> -> map:LongTagMap<'Tag, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "findOrDefault<'T, 'Tag>",
                    "class_name": "TagMap",
                    "namespace": "ExtCore.Collections.TagMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "defaultValue:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> key:int<'Tag> -> map:TagMap<'Tag, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "findOrDefault<'T>",
                    "class_name": "IntMap",
                    "namespace": "ExtCore.Collections.IntMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "defaultValue:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> key:int -> map:IntMap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "findOrDefault<'T>",
                    "class_name": "LongMap",
                    "namespace": "ExtCore.Collections.LongMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "defaultValue:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> key:int64 -> map:LongMap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "findValue<'T, 'Key>",
                    "class_name": "Bimap",
                    "namespace": "ExtCore.Collections.Bimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:Bimap<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'Key",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison and 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'Key, 'T, 'State>",
                    "class_name": "Map",
                    "namespace": "Microsoft.FSharp.Collections.Map"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'Key -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> table:Map<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "FSharp.Core",
                "xml_doc": "Folds over the bindings in the map",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/map.fold%5b%27key%2c%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'Key, 'T>",
                    "class_name": "LruCache",
                    "namespace": "ExtCore.Caching.LruCache"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'Key -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> cache:LruCache<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'Key, 'T>",
                    "class_name": "Bimap",
                    "namespace": "ExtCore.Collections.Bimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'Key -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:Bimap<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison and 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'Key, 'T>",
                    "class_name": "Dict",
                    "namespace": "ExtCore.Collections.Dict"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'Key -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> dict:dict<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'Key, 'T>",
                    "class_name": "HashMap",
                    "namespace": "ExtCore.Collections.HashMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'Key -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> map:HashMap<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T, 'Error>",
                    "class_name": "Choice",
                    "namespace": "ExtCore.Choice"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> value:Choice<'T, 'Error> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T, 'Tag>",
                    "class_name": "LongTagBimap",
                    "namespace": "ExtCore.Collections.LongTagBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int64<'Tag> -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:LongTagBimap<'Tag, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T, 'Tag>",
                    "class_name": "LongTagMap",
                    "namespace": "ExtCore.Collections.LongTagMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int64<'Tag> -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> map:LongTagMap<'Tag, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T, 'Tag>",
                    "class_name": "TagBimap",
                    "namespace": "ExtCore.Collections.TagBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int<'Tag> -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:TagBimap<'Tag, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T, 'Tag>",
                    "class_name": "TagMap",
                    "namespace": "ExtCore.Collections.TagMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int<'Tag> -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> map:TagMap<'Tag, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T>",
                    "class_name": "ArrayView",
                    "namespace": "ExtCore.Collections.ArrayView"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> view:ArrayView<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T>",
                    "class_name": "HashSet",
                    "namespace": "ExtCore.Collections.HashSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> set:HashSet<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T>",
                    "class_name": "IntBimap",
                    "namespace": "ExtCore.Collections.IntBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:IntBimap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T>",
                    "class_name": "IntMap",
                    "namespace": "ExtCore.Collections.IntMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> map:IntMap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T>",
                    "class_name": "LongBimap",
                    "namespace": "ExtCore.Collections.LongBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int64 -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:LongBimap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T>",
                    "class_name": "LongMap",
                    "namespace": "ExtCore.Collections.LongMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int64 -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> map:LongMap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T>",
                    "class_name": "ResizeArray",
                    "namespace": "ExtCore.Collections.ResizeArray"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> resizeArray:ResizeArray<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'T>",
                    "class_name": "Vector",
                    "namespace": "ExtCore.Collections.Vector"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> vec:vector<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'Tag>",
                    "class_name": "LongTagSet",
                    "namespace": "ExtCore.Collections.LongTagSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int64<'Tag> -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> set:LongTagSet<'Tag> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State, 'Tag>",
                    "class_name": "TagSet",
                    "namespace": "ExtCore.Collections.TagSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int<'Tag> -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> set:TagSet<'Tag> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State>",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> set:IntSet -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State>",
                    "class_name": "LongSet",
                    "namespace": "ExtCore.Collections.LongSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int64 -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> set:LongSet -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State>",
                    "class_name": "Lines",
                    "namespace": "ExtCore.IO.File.Lines"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> string -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> path:string -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State>",
                    "class_name": "String",
                    "namespace": "ExtCore.String"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> char -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> str:string -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'State>",
                    "class_name": "Substring",
                    "namespace": "ExtCore.Substring"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> char -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> substr:substring -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'T, 'State>",
                    "class_name": "PSeq",
                    "namespace": "FSharp.Collections.ParallelSeq.PSeq"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> source:seq<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Collections.ParallelSeq",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'T, 'State>",
                    "class_name": "Array",
                    "namespace": "Microsoft.FSharp.Collections.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> array:'T[] -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Applies a function to each element of the collection, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN then computes  f (... (f s i0)...) iN",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/array.fold%5b%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'T, 'State>",
                    "class_name": "List",
                    "namespace": "Microsoft.FSharp.Collections.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> list:list<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Applies a function to each element of the collection, threading an accumulator argument through the computation. Take the second argument, and apply the function to it and the first element of the list. Then feed this result into the function along with the second element and so on. Return the final result. If the input function is f and the elements are i0...iN then  computes f (... (f s i0) i1 ...) iN.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/list.fold%5b%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'T, 'State>",
                    "class_name": "Seq",
                    "namespace": "Microsoft.FSharp.Collections.Seq"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> source:seq<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Applies a function to each element of the collection, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN  then computes f (... (f s i0)...) iN",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/seq.fold%5b%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'T, 'State>",
                    "class_name": "Set",
                    "namespace": "Microsoft.FSharp.Collections.Set"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> set:Set<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "FSharp.Core",
                "xml_doc": "Applies the given accumulating function to all the elements of the set",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/set.fold%5b%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "fold<'T, 'State>",
                    "class_name": "Option",
                    "namespace": "Microsoft.FSharp.Core.Option"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> option:option<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "fold f s inp evaluates to match inp with None -> s | Some x -> f s x.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/option.fold%5b%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'Key, 'T, 'State>",
                    "class_name": "LruCache",
                    "namespace": "ExtCore.Caching.LruCache"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('Key -> 'T -> 'State -> 'State) -> cache:LruCache<'Key, 'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'Key, 'T, 'State>",
                    "class_name": "Bimap",
                    "namespace": "ExtCore.Collections.Bimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('Key -> 'T -> 'State -> 'State) -> bimap:Bimap<'Key, 'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison and 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'Key, 'T, 'State>",
                    "class_name": "HashMap",
                    "namespace": "ExtCore.Collections.HashMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('Key -> 'T -> 'State -> 'State) -> map:HashMap<'Key, 'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'Key, 'T, 'State>",
                    "class_name": "Map",
                    "namespace": "Microsoft.FSharp.Collections.Map"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('Key -> 'T -> 'State -> 'State) -> table:Map<'Key, 'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "FSharp.Core",
                "xml_doc": "Folds over the bindings in the map.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/map.foldback%5b%27key%2c%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'State, 'Tag>",
                    "class_name": "LongTagSet",
                    "namespace": "ExtCore.Collections.LongTagSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int64<'Tag> -> 'State -> 'State) -> set:LongTagSet<'Tag> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'State, 'Tag>",
                    "class_name": "TagSet",
                    "namespace": "ExtCore.Collections.TagSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int<'Tag> -> 'State -> 'State) -> set:TagSet<'Tag> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'State>",
                    "class_name": "LongSet",
                    "namespace": "ExtCore.Collections.LongSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int64 -> 'State -> 'State) -> set:LongSet -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'State>",
                    "class_name": "String",
                    "namespace": "ExtCore.String"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(char -> 'State -> 'State) -> str:string -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'State>",
                    "class_name": "Substring",
                    "namespace": "ExtCore.Substring"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(char -> 'State -> 'State) -> substr:substring -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State, 'Error>",
                    "class_name": "Choice",
                    "namespace": "ExtCore.Choice"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'State -> 'State) -> value:Choice<'T, 'Error> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State, 'Tag>",
                    "class_name": "LongTagBimap",
                    "namespace": "ExtCore.Collections.LongTagBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int64<'Tag> -> 'T -> 'State -> 'State) -> bimap:LongTagBimap<'Tag, 'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State, 'Tag>",
                    "class_name": "LongTagMap",
                    "namespace": "ExtCore.Collections.LongTagMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int64<'Tag> -> 'T -> 'State -> 'State) -> map:LongTagMap<'Tag, 'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State, 'Tag>",
                    "class_name": "TagBimap",
                    "namespace": "ExtCore.Collections.TagBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int<'Tag> -> 'T -> 'State -> 'State) -> bimap:TagBimap<'Tag, 'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State, 'Tag>",
                    "class_name": "TagMap",
                    "namespace": "ExtCore.Collections.TagMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int<'Tag> -> 'T -> 'State -> 'State) -> map:TagMap<'Tag, 'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "ArrayView",
                    "namespace": "ExtCore.Collections.ArrayView"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'State -> 'State) -> view:ArrayView<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "HashSet",
                    "namespace": "ExtCore.Collections.HashSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'State -> 'State) -> set:HashSet<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "IntBimap",
                    "namespace": "ExtCore.Collections.IntBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int -> 'T -> 'State -> 'State) -> bimap:IntBimap<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "IntMap",
                    "namespace": "ExtCore.Collections.IntMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int -> 'T -> 'State -> 'State) -> map:IntMap<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "LongBimap",
                    "namespace": "ExtCore.Collections.LongBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int64 -> 'T -> 'State -> 'State) -> bimap:LongBimap<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "LongMap",
                    "namespace": "ExtCore.Collections.LongMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int64 -> 'T -> 'State -> 'State) -> map:LongMap<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "ResizeArray",
                    "namespace": "ExtCore.Collections.ResizeArray"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'State -> 'State) -> resizeArray:ResizeArray<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "Vector",
                    "namespace": "ExtCore.Collections.Vector"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'State -> 'State) -> vec:vector<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "Array",
                    "namespace": "Microsoft.FSharp.Collections.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'State -> 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Applies a function to each element of the array, starting from the end, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN then computes  f i0 (...(f iN s))",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/array.foldback%5b%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "List",
                    "namespace": "Microsoft.FSharp.Collections.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'State -> 'State) -> list:list<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Applies a function to each element of the collection, starting from the end, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN then  computes f i0 (...(f iN s)).",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/list.foldback%5b%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "Seq",
                    "namespace": "Microsoft.FSharp.Collections.Seq"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'State -> 'State) -> source:seq<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Applies a function to each element of the collection, starting from the end, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN then computes f i0 (... (f iN s)...)",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/seq.foldback%5b%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "Set",
                    "namespace": "Microsoft.FSharp.Collections.Set"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'State -> 'State) -> set:Set<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "FSharp.Core",
                "xml_doc": "Applies the given accumulating function to all the elements of the set.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/set.foldback%5b%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'State>",
                    "class_name": "Option",
                    "namespace": "Microsoft.FSharp.Core.Option"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'State -> 'State) -> option:option<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "fold f inp s evaluates to match inp with None -> s | Some x -> f x s.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/option.foldback%5b%27t%2c%27state%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBack<'T, 'a>",
                    "class_name": "NameMap",
                    "namespace": "Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.NameMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:(string -> 'T -> 'a -> 'a) -> m:NameMap<'T> -> z:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBackPairwise<'T, 'State>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Collections.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'T -> 'State -> 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBackPairwise<'T, 'State>",
                    "class_name": "List",
                    "namespace": "ExtCore.Collections.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('T -> 'T -> 'State -> 'State) -> list:list<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldBackRange<'T, 'a>",
                    "class_name": "NameMap",
                    "namespace": "Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.NameMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('T -> 'a -> 'a) -> l:NameMap<'T> -> acc:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldPairwise<'State, 'T>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Collections.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> array:'T[] -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldPairwise<'State, 'T>",
                    "class_name": "List",
                    "namespace": "ExtCore.Collections.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> 'T -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> list:list<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldPairwise<'State>",
                    "class_name": "String",
                    "namespace": "ExtCore.String"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> char -> char -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> str:string -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldi<'State, 'T, 'Tag>",
                    "class_name": "TaggedArray",
                    "namespace": "ExtCore.Collections.TaggedArray"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int<'Tag> -> 'State -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> array:'T[] -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldi<'State, 'T>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Collections.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> array:'T[] -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldi<'State, 'T>",
                    "class_name": "ResizeArray",
                    "namespace": "ExtCore.Collections.ResizeArray"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> resizeArray:ResizeArray<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldi<'State, 'T>",
                    "class_name": "Set",
                    "namespace": "ExtCore.Collections.Set"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> set:Set<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldi<'State, 'T>",
                    "class_name": "Vector",
                    "namespace": "ExtCore.Collections.Vector"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int -> 'T -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> vec:vector<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldi<'State>",
                    "class_name": "Lines",
                    "namespace": "ExtCore.IO.File.Lines"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int -> string -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> path:string -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldi<'State>",
                    "class_name": "Substring",
                    "namespace": "ExtCore.Substring"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:('State -> int -> char -> 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> substr:substring -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldiBack<'T, 'State, 'Tag>",
                    "class_name": "TaggedArray",
                    "namespace": "ExtCore.Collections.TaggedArray"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int<'Tag> -> 'T -> 'State -> 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldiBack<'T, 'State>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Collections.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int -> 'T -> 'State -> 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldiBack<'T, 'State>",
                    "class_name": "ResizeArray",
                    "namespace": "ExtCore.Collections.ResizeArray"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int -> 'T -> 'State -> 'State) -> resizeArray:ResizeArray<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "foldiBack<'T, 'State>",
                    "class_name": "Vector",
                    "namespace": "ExtCore.Collections.Vector"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int -> 'T -> 'State -> 'State) -> vec:vector<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "get<'T>",
                    "class_name": "Array2D",
                    "namespace": "Microsoft.FSharp.Collections.Array2D"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "array:'T[,] -> index1:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> index2:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Fetches an element from a 2D array. You can also use the syntax array.[index1,index2].",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/array2d.get%5b%27t%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "getState<'State, 'K>",
                    "class_name": "StateCont",
                    "namespace": "ExtCore.Control.Cps.StateCont"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> cont:('State * 'State -> 'K) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'K",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "liftChoice<'T, 'Error, 'State>",
                    "class_name": "StatefulChoice",
                    "namespace": "ExtCore.Control.StatefulChoice"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "choice:Choice<'T, 'Error> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "Choice<'T, 'Error> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "liftState<'State, 'T, 'Error>",
                    "class_name": "StatefulChoice",
                    "namespace": "ExtCore.Control.StatefulChoice"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "stateFunc:StateFunc<'State, 'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "Choice<'T, 'Error> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "max<^T>",
                    "class_name": "NonStructuralComparison",
                    "namespace": "Microsoft.FSharp.Core.Operators.NonStructuralComparison"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "e1:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> e2:^T -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_LessThan : ^T * ^T -> bool)",
                "assembly": "FSharp.Core",
                "xml_doc": "Maximum of the two values",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/nonstructuralcomparison.max%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "maxBy<'T, 'Key>",
                    "class_name": "Operators",
                    "namespace": "ExtCore.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'Key) -> x:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:'T -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "maxElement",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "set:",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "maxElementSigned",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "set:",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "min<^T>",
                    "class_name": "NonStructuralComparison",
                    "namespace": "Microsoft.FSharp.Core.Operators.NonStructuralComparison"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "e1:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> e2:^T -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_LessThan : ^T * ^T -> bool)",
                "assembly": "FSharp.Core",
                "xml_doc": "Minimum of the two values",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/nonstructuralcomparison.min%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "minBy<'T, 'Key>",
                    "class_name": "Operators",
                    "namespace": "ExtCore.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'Key) -> x:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:'T -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "minElement",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "set:",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "minElementSigned",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "set:",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "new",
                    "class_name": "IntPtr",
                    "namespace": "System.IntPtr"
                },
                "kind": "constructor",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "IntPtr",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Initializes a new instance of  using the specified 32-bit pointer or handle.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.intptr.-ctor?view=netframework-4.7#System_IntPtr__ctor_System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "op_Explicit",
                    "class_name": "IntPtr",
                    "namespace": "System.IntPtr"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.intptr.op_explicit?view=netframework-4.7#System_IntPtr_op_Explicit_System_Int32_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "op_Explicit",
                    "class_name": "IntPtr",
                    "namespace": "System.IntPtr"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.intptr.op_explicit?view=netframework-4.7#System_IntPtr_op_Explicit_System_IntPtr_"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "pown<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> n:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member get_One : unit -> ^T) and ^T : (static member op_Multiply : ^T * ^T -> ^T) and ^T : (static member op_Division : ^T * ^T -> ^T)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded power operator. If n > 0 then equivalent to x*...*x for n occurrences of x.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.pown%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "protectAssemblyExplorationNoReraise<'a>",
                    "class_name": "ErrorLogger",
                    "namespace": "Microsoft.FSharp.Compiler.ErrorLogger"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "dflt1:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> dflt2:'a -> f:(unit -> 'a) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "read<'Env, 'State>",
                    "class_name": "ReaderState",
                    "namespace": "ExtCore.Control.ReaderState"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "env:",
                        "color_id": null
                    },
                    {
                        "name": "'Env",
                        "color_id": 0
                    },
                    {
                        "name": " -> state:'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "'Env * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "run<'Env, 'T>",
                    "class_name": "Reader",
                    "namespace": "ExtCore.Control.Reader"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "readerFunc:ReaderFunc<'Env, 'T> -> env:",
                        "color_id": null
                    },
                    {
                        "name": "'Env",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "setState<'State, 'Error>",
                    "class_name": "StatefulChoice",
                    "namespace": "ExtCore.Control.StatefulChoice"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> 'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "Choice<unit, 'Error> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "setState<'State>",
                    "class_name": "State",
                    "namespace": "ExtCore.Control.State"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> 'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "singleton",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "snd<'T1, 'T2>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "tuple:",
                        "color_id": null
                    },
                    {
                        "name": "('T1 * 'T2)",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T2",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Return the second element of a tuple, snd (a,b) = b.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.snd%5b%27t1%2c%27t2%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "toFunction<'U>",
                    "class_name": "Order",
                    "namespace": "Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.Order"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "pxOrder:IComparer<'U> -> x:",
                        "color_id": null
                    },
                    {
                        "name": "'U",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:'U -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 3,
            "api": {
                "name": {
                    "id": "warbler<'t, 'u>",
                    "class_name": "WebPart",
                    "namespace": "Suave.WebPart"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('t -> 't -> 'u) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'t",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'u",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "Which bird? A Warbler! Pipe the request through to a bird that can peck at it. Put another way, using 'warbler' lets you look at the first parameter and then make a decision about what thing to return (it's most likely a WebPart you'll be returning). (Remember, WebPart is HttpContext -> Async<HttpContext option>) where HttpContext is 'a and Async<_> is 'b.",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "( <|| )<'T1, 'T2, 'U>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "func:('T1 -> 'T2 -> 'U) -> arg1:'T1 * arg2:'T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Apply a function to two values, the values being a pair on the right, the function on the left",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-%5bhh-%5d%5b%27t1%2c%27t2%2c%27u%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "( >!> )<'a, 'b>",
                    "class_name": "Operators",
                    "namespace": "Fake.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "func1:('a -> unit) -> func2:('a -> 'b) -> x:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'b",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Fake.Core.Environment",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "( ?<- )<'a, 'b, 'c>",
                    "class_name": "TargetOperators",
                    "namespace": "Fake.Core.TargetOperators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a -> 'b -> 'c) -> str:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> action:'b -> ",
                        "color_id": null
                    },
                    {
                        "name": "'c",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Fake.Core.Target",
                "xml_doc": "Allows to use Tokens instead of strings for TargetNames",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "( ^+ )<'a, 'b>",
                    "class_name": "Wrap<'T>",
                    "namespace": "MBrace.FsPickler.Combinators.Pickler.ProductInternals.Wrap<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "Wrap<'a -> 'b> * x:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'b",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FsPickler",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "( ||> )<'T1, 'T2, 'U>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "arg1:'T1 * arg2:'T2 -> func:('T1 -> 'T2 -> 'U) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Apply a function to two values, the values being a pair on the left, the function on the right",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-hh%5d-%5d%5b%27t1%2c%27t2%2c%27u%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "Abs",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the absolute value of a 16-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.abs?view=netframework-4.7#System_Math_Abs_System_Int16_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "Abs",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the absolute value of a 64-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.abs?view=netframework-4.7#System_Math_Abs_System_Int64_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "AddToAny",
                    "class_name": "BlockingCollection<'T>",
                    "namespace": "System.Collections.Concurrent.BlockingCollection<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "collections:BlockingCollection<'T>[] * item:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * cancellationToken:CancellationToken -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Adds the specified item to any one of the specified  instances.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.addtoany?view=netframework-4.7#System_Collections_Concurrent_BlockingCollection_1_AddToAny_System_Collections_Concurrent_BlockingCollection__0_____0_System_Threading_CancellationToken_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "Aggregate<'TSource, 'TAccumulate>",
                    "class_name": "Enumerable",
                    "namespace": "System.Linq.Enumerable"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "source:IEnumerable<'TSource> * seed:",
                        "color_id": null
                    },
                    {
                        "name": "'TAccumulate",
                        "color_id": 0
                    },
                    {
                        "name": " * func:Func<'TAccumulate, 'TSource, 'TAccumulate> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TAccumulate",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System.Core",
                "xml_doc": "Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregate?view=netframework-4.7#System_Linq_Enumerable_Aggregate__2_System_Collections_Generic_IEnumerable___0____1_System_Func___1___0___1__"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "Aggregate<'TSource, 'TAccumulate>",
                    "class_name": "ParallelEnumerable",
                    "namespace": "System.Linq.ParallelEnumerable"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "source:ParallelQuery<'TSource> * seed:",
                        "color_id": null
                    },
                    {
                        "name": "'TAccumulate",
                        "color_id": 0
                    },
                    {
                        "name": " * func:Func<'TAccumulate, 'TSource, 'TAccumulate> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TAccumulate",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System.Core",
                "xml_doc": "Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.linq.parallelenumerable.aggregate?view=netframework-4.7#System_Linq_ParallelEnumerable_Aggregate__2_System_Linq_ParallelQuery___0____1_System_Func___1___0___1__"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "Aggregate<'TSource, 'TAccumulate>",
                    "class_name": "Queryable",
                    "namespace": "System.Linq.Queryable"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "source:IQueryable<'TSource> * seed:",
                        "color_id": null
                    },
                    {
                        "name": "'TAccumulate",
                        "color_id": 0
                    },
                    {
                        "name": " * func:Expression<Func<'TAccumulate, 'TSource, 'TAccumulate>> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TAccumulate",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System.Core",
                "xml_doc": "Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.linq.queryable.aggregate?view=netframework-4.7#System_Linq_Queryable_Aggregate__2_System_Linq_IQueryable___0____1_System_Linq_Expressions_Expression_System_Func___1___0___1___"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "BigMul",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "a:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " * b:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Produces the full product of two 32-bit numbers.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.bigmul?view=netframework-4.7#System_Math_BigMul_System_Int32_System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "BinarySearch<'T>",
                    "class_name": "Array",
                    "namespace": "System.Array"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "array:'T[] * value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * comparer:IComparer<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Searches an entire one-dimensional sorted array for a value using the specified  generic interface.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=netframework-4.7#System_Array_BinarySearch__1___0_____0_System_Collections_Generic_IComparer___0__"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "CompareExchange",
                    "class_name": "Interlocked",
                    "namespace": "System.Threading.Interlocked"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location1:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int>",
                        "color_id": 0
                    },
                    {
                        "name": " * value:int * comparand:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked.compareexchange?view=netframework-4.7#System_Threading_Interlocked_CompareExchange_System_Int32__System_Int32_System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "UInt16",
                    "namespace": "System.UInt16"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:obj -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified object and returns an indication of their relative values.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.uint16.compareto?view=netframework-4.7#System_UInt16_CompareTo_System_Object_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "UInt16",
                    "namespace": "System.UInt16"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:uint16 -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified 16-bit unsigned integer and returns an indication of their relative values.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.uint16.compareto?view=netframework-4.7#System_UInt16_CompareTo_System_UInt16_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "UInt32",
                    "namespace": "System.UInt32"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:obj -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified object and returns an indication of their relative values.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.uint32.compareto?view=netframework-4.7#System_UInt32_CompareTo_System_Object_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "UInt32",
                    "namespace": "System.UInt32"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:uint32 -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified 32-bit unsigned integer and returns an indication of their relative values.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.uint32.compareto?view=netframework-4.7#System_UInt32_CompareTo_System_UInt32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "UInt64",
                    "namespace": "System.UInt64"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:uint64 -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified 64-bit unsigned integer and returns an indication of their relative values.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.uint64.compareto?view=netframework-4.7#System_UInt64_CompareTo_System_UInt64_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "CompareTo",
                    "class_name": "UInt64",
                    "namespace": "System.UInt64"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "value:obj -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Compares this instance to a specified object and returns an indication of their relative values.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.uint64.compareto?view=netframework-4.7#System_UInt64_CompareTo_System_Object_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "Create<'T1, 'T2>",
                    "class_name": "Tuple",
                    "namespace": "System.Tuple"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "item1:",
                        "color_id": null
                    },
                    {
                        "name": "'T1",
                        "color_id": 0
                    },
                    {
                        "name": " * item2:'T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T1 * 'T2",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Creates a new 2-tuple, or pair.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.tuple.create?view=netframework-4.7#System_Tuple_Create__2___0___1_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "Create<'T1, 'T2>",
                    "class_name": "ValueTuple",
                    "namespace": "System.ValueTuple"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "item1:",
                        "color_id": null
                    },
                    {
                        "name": "'T1",
                        "color_id": 0
                    },
                    {
                        "name": " * item2:'T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "struct ('T1 * 'T2)",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Creates a new value tuple with 2 components (a pair).",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.valuetuple.create?view=netframework-4.7#System_ValueTuple_Create__2___0___1_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "DeserializeAnonymousType<'T>",
                    "class_name": "JsonConvert",
                    "namespace": "Newtonsoft.Json.JsonConvert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:string * anonymousTypeObject:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * settings:JsonSerializerSettings -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Newtonsoft.Json",
                "xml_doc": "Deserializes the JSON to the given anonymous type using .",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "Find",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "predicate:(int -> bool) -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "GetComInterfaceForObject<'T, 'TInterface>",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "o:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "[Supported in the .NET Framework 4.5.1 and later versions] Returns a pointer to an IUnknown interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.getcominterfaceforobject?view=netframework-4.7#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject__2___0_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "GetDelegateForFunctionPointer<'TDelegate>",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'TDelegate",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "[Supported in the .NET Framework 4.5.1 and later versions] Converts an unmanaged function pointer to a delegate of a specified type.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.getdelegateforfunctionpointer?view=netframework-4.7#System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer__1_System_IntPtr_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "GetFunctionPointerForDelegate<'TDelegate>",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "d:",
                        "color_id": null
                    },
                    {
                        "name": "'TDelegate",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "[Supported in the .NET Framework 4.5.1 and later versions] Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.getfunctionpointerfordelegate?view=netframework-4.7#System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate__1___0_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "GetHashCode",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "GetHashCode",
                    "class_name": "IntPtr",
                    "namespace": "System.IntPtr"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the hash code for this instance.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.intptr.gethashcode?view=netframework-4.7#System_IntPtr_GetHashCode"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "GetHashCode",
                    "class_name": "UInt16",
                    "namespace": "System.UInt16"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the hash code for this instance.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.uint16.gethashcode?view=netframework-4.7#System_UInt16_GetHashCode"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "GetHashCode",
                    "class_name": "UInt32",
                    "namespace": "System.UInt32"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the hash code for this instance.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.uint32.gethashcode?view=netframework-4.7#System_UInt32_GetHashCode"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "GetHashCode",
                    "class_name": "UInt64",
                    "namespace": "System.UInt64"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the hash code for this instance.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.uint64.gethashcode?view=netframework-4.7#System_UInt64_GetHashCode"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "GetObjectForNativeVariant<'T>",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "pSrcNativeVariant:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "[Supported in the .NET Framework 4.5.1 and later versions] Converts a COM VARIANT to an object of a specified type.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.getobjectfornativevariant?view=netframework-4.7#System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant__1_System_IntPtr_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "HostToNetworkOrder",
                    "class_name": "IPAddress",
                    "namespace": "System.Net.IPAddress"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "host:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Converts a short value from host byte order to network byte order.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress.hosttonetworkorder?view=netframework-4.7#System_Net_IPAddress_HostToNetworkOrder_System_Int16_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "HostToNetworkOrder",
                    "class_name": "IPAddress",
                    "namespace": "System.Net.IPAddress"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "host:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Converts a long value from host byte order to network byte order.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress.hosttonetworkorder?view=netframework-4.7#System_Net_IPAddress_HostToNetworkOrder_System_Int64_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "IndexOf<'T>",
                    "class_name": "Array",
                    "namespace": "System.Array"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "array:'T[] * value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * startIndex:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=netframework-4.7#System_Array_IndexOf__1___0_____0_System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "LastIndexOf<'T>",
                    "class_name": "Array",
                    "namespace": "System.Array"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "array:'T[] * value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * startIndex:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Searches for the specified object and returns the index of the last occurrence within the range of elements in the  that extends from the first element to the specified index.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.array.lastindexof?view=netframework-4.7#System_Array_LastIndexOf__1___0_____0_System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "NetworkToHostOrder",
                    "class_name": "IPAddress",
                    "namespace": "System.Net.IPAddress"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "network:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Converts a short value from network byte order to host byte order.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress.networktohostorder?view=netframework-4.7#System_Net_IPAddress_NetworkToHostOrder_System_Int16_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "NetworkToHostOrder",
                    "class_name": "IPAddress",
                    "namespace": "System.Net.IPAddress"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "network:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Converts a long value from network byte order to host byte order.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress.networktohostorder?view=netframework-4.7#System_Net_IPAddress_NetworkToHostOrder_System_Int64_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "PtrToStructure<'T>",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "[Supported in the .NET Framework 4.5.1 and later versions] Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.ptrtostructure?view=netframework-4.7#System_Runtime_InteropServices_Marshal_PtrToStructure__1_System_IntPtr_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ReadInt16",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:obj * ofs:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads a 16-bit signed integer at a given offset from unmanaged memory.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.readint16?view=netframework-4.7#System_Runtime_InteropServices_Marshal_ReadInt16_System_Object_System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ReadInt64",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:obj * ofs:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads a 64-bit signed integer at a given offset from unmanaged memory.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.readint64?view=netframework-4.7#System_Runtime_InteropServices_Marshal_ReadInt64_System_Object_System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "TakeFromAny",
                    "class_name": "BlockingCollection<'T>",
                    "namespace": "System.Collections.Concurrent.BlockingCollection<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "collections:BlockingCollection<'T>[] * item:",
                        "color_id": null
                    },
                    {
                        "name": "byref<'T>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Takes an item from any one of the specified  instances.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.takefromany?view=netframework-4.7#System_Collections_Concurrent_BlockingCollection_1_TakeFromAny_System_Collections_Concurrent_BlockingCollection__0_____0__"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ToInt16",
                    "class_name": "BitConverter",
                    "namespace": "System.BitConverter"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:byte[] * startIndex:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.bitconverter.toint16?view=netframework-4.7#System_BitConverter_ToInt16_System_Byte___System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ToInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the specified 16-bit signed integer; no actual conversion is performed.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint16?view=netframework-4.7#System_Convert_ToInt16_System_Int16_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ToInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint16?view=netframework-4.7#System_Convert_ToInt16_System_Int64_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ToInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:string * fromBase:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint16?view=netframework-4.7#System_Convert_ToInt16_System_String_System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ToInt32",
                    "class_name": "IntPtr",
                    "namespace": "System.IntPtr"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of this instance to a 32-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.intptr.toint32?view=netframework-4.7#System_IntPtr_ToInt32"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ToInt64",
                    "class_name": "BitConverter",
                    "namespace": "System.BitConverter"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:byte[] * startIndex:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.bitconverter.toint64?view=netframework-4.7#System_BitConverter_ToInt64_System_Byte___System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ToInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:string * fromBase:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint64?view=netframework-4.7#System_Convert_ToInt64_System_String_System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ToInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the specified 64-bit signed integer; no actual conversion is performed.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint64?view=netframework-4.7#System_Convert_ToInt64_System_Int64_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ToInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint64?view=netframework-4.7#System_Convert_ToInt64_System_Int16_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "TryAddToAny",
                    "class_name": "BlockingCollection<'T>",
                    "namespace": "System.Collections.Concurrent.BlockingCollection<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "collections:BlockingCollection<'T>[] * item:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * timeout:TimeSpan -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Tries to add the specified item to any one of the specified  instances while observing the specified cancellation token.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.tryaddtoany?view=netframework-4.7#System_Collections_Concurrent_BlockingCollection_1_TryAddToAny_System_Collections_Concurrent_BlockingCollection__0_____0_System_TimeSpan_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "TryAddToAny",
                    "class_name": "BlockingCollection<'T>",
                    "namespace": "System.Collections.Concurrent.BlockingCollection<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "collections:BlockingCollection<'T>[] * item:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * millisecondsTimeout:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Tries to add the specified item to any one of the specified  instances.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.tryaddtoany?view=netframework-4.7#System_Collections_Concurrent_BlockingCollection_1_TryAddToAny_System_Collections_Concurrent_BlockingCollection__0_____0_System_Int32_"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "TryTakeFromAny",
                    "class_name": "BlockingCollection<'T>",
                    "namespace": "System.Collections.Concurrent.BlockingCollection<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "collections:BlockingCollection<'T>[] * item:",
                        "color_id": null
                    },
                    {
                        "name": "byref<'T>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Tries to remove an item from any one of the specified  instances.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.trytakefromany?view=netframework-4.7#System_Collections_Concurrent_BlockingCollection_1_TryTakeFromAny_System_Collections_Concurrent_BlockingCollection__0_____0__"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "add",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> set:IntSet -> ",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "collectFold<'a, 'b, 'c>",
                    "class_name": "List",
                    "namespace": "Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a -> 'b -> list<'c> * 'a) -> s:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> l:list<'b> -> ",
                        "color_id": null
                    },
                    {
                        "name": "list<'c> * 'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "curry<'a, 'b, 'c>",
                    "class_name": "YoLo",
                    "namespace": "YoLo"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a * 'b -> 'c) -> a:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> b:'b -> ",
                        "color_id": null
                    },
                    {
                        "name": "'c",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "evaluate<'Env, 'State, 'T>",
                    "class_name": "ReaderState",
                    "namespace": "ExtCore.Control.ReaderState"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "readerStateFunc:ReaderStateFunc<'Env, 'State, 'T> -> env:",
                        "color_id": null
                    },
                    {
                        "name": "'Env",
                        "color_id": 0
                    },
                    {
                        "name": " -> initialState:'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "evaluate<'State, 'T, 'K>",
                    "class_name": "StateCont",
                    "namespace": "ExtCore.Control.Cps.StateCont"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "stateFunc:StateContFunc<'State, 'T, 'K> -> initialState:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> cont:('T -> 'K) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'K",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "execute<'Env, 'State, 'T>",
                    "class_name": "ReaderState",
                    "namespace": "ExtCore.Control.ReaderState"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "readerStateFunc:ReaderStateFunc<'Env, 'State, 'T> -> env:",
                        "color_id": null
                    },
                    {
                        "name": "'Env",
                        "color_id": 0
                    },
                    {
                        "name": " -> initialState:'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "execute<'State, 'T, 'K>",
                    "class_name": "StateCont",
                    "namespace": "ExtCore.Control.Cps.StateCont"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "stateFunc:StateContFunc<'State, 'T, 'K> -> initialState:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> cont:('State -> 'K) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'K",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "find",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "predicate:(int -> bool) -> set:",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "find<'Key, 'T>",
                    "class_name": "LruCache",
                    "namespace": "ExtCore.Caching.LruCache"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "'Key",
                        "color_id": 0
                    },
                    {
                        "name": " -> cache:LruCache<'Key, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T * LruCache<'Key, 'T>",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'Key : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "find<'T>",
                    "class_name": "LongBimap",
                    "namespace": "ExtCore.Collections.LongBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:LongBimap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "find<'T>",
                    "class_name": "LongMap",
                    "namespace": "ExtCore.Collections.LongMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> map:LongMap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "findValue<'T>",
                    "class_name": "LongBimap",
                    "namespace": "ExtCore.Collections.LongBimap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> bimap:LongBimap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "flip<'U, 'T, 'V>",
                    "class_name": "Operators",
                    "namespace": "ExtCore.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('U -> 'T -> 'V) -> x:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:'U -> ",
                        "color_id": null
                    },
                    {
                        "name": "'V",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "flip<'a, 'b, 'c>",
                    "class_name": "YoLo",
                    "namespace": "YoLo"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a -> 'b -> 'c) -> a:",
                        "color_id": null
                    },
                    {
                        "name": "'b",
                        "color_id": 0
                    },
                    {
                        "name": " -> b:'a -> ",
                        "color_id": null
                    },
                    {
                        "name": "'c",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "getState<'Env, 'State>",
                    "class_name": "ReaderState",
                    "namespace": "ExtCore.Control.ReaderState"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "'Env",
                        "color_id": 0
                    },
                    {
                        "name": " -> state:'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "init<'State, 'T>",
                    "class_name": "List",
                    "namespace": "ExtCore.Control.Collections.State.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "length:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> initializer:(int -> 'State -> 'T * 'State) -> state:'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "list<'T> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "int16<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> int16)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to signed 16-bit integer. This is a direct conversion for all  primitive numeric types. For strings, the input is converted using Int16.Parse()   with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.int16%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "int16<^T>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> int16)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to int16. This is a direct, checked conversion for all  primitive numeric types. For strings, the input is converted using System.Int16.Parse()  with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.int16%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "int64<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> int64)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to signed 64-bit integer. This is a direct conversion for all  primitive numeric types. For strings, the input is converted using Int64.Parse()  with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.int64%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "int64<^T>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> int64)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to int64. This is a direct, checked conversion for all  primitive numeric types. For strings, the input is converted using System.Int64.Parse()  with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.int64%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iter<'State, 'Tag>",
                    "class_name": "TagSet",
                    "namespace": "ExtCore.Control.Collections.State.TagSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:(int<'Tag> -> 'State -> unit * 'State) -> set:TagSet<'Tag> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iter<'T, 'State>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Control.Collections.State.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:('T -> 'State -> unit * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iter<'T, 'State>",
                    "class_name": "ArrayView",
                    "namespace": "ExtCore.Control.Collections.State.ArrayView"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:('T -> 'State -> unit * 'State) -> view:ArrayView<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iter<'T, 'State>",
                    "class_name": "HashSet",
                    "namespace": "ExtCore.Control.Collections.State.HashSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:('T -> 'State -> unit * 'State) -> set:HashSet<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iter<'T, 'State>",
                    "class_name": "List",
                    "namespace": "ExtCore.Control.Collections.State.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:('T -> 'State -> unit * 'State) -> list:list<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iter<'T, 'State>",
                    "class_name": "Set",
                    "namespace": "ExtCore.Control.Collections.State.Set"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:('T -> 'State -> unit * 'State) -> set:Set<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iterBack<'State, 'Tag>",
                    "class_name": "TagSet",
                    "namespace": "ExtCore.Control.Collections.State.TagSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:(int<'Tag> -> 'State -> unit * 'State) -> set:TagSet<'Tag> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iterBack<'T, 'State>",
                    "class_name": "HashSet",
                    "namespace": "ExtCore.Control.Collections.State.HashSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:('T -> 'State -> unit * 'State) -> set:HashSet<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iterBack<'T, 'State>",
                    "class_name": "List",
                    "namespace": "ExtCore.Control.Collections.State.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:('T -> 'State -> unit * 'State) -> list:list<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iterBack<'T, 'State>",
                    "class_name": "Set",
                    "namespace": "ExtCore.Control.Collections.State.Set"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:('T -> 'State -> unit * 'State) -> set:Set<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iteri<'T, 'State>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Control.Collections.State.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:(int -> 'T -> 'State -> unit * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iteri<'T, 'State>",
                    "class_name": "ArrayView",
                    "namespace": "ExtCore.Control.Collections.State.ArrayView"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:(int -> 'T -> 'State -> unit * 'State) -> view:ArrayView<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "iteri<'T, 'State>",
                    "class_name": "List",
                    "namespace": "ExtCore.Control.Collections.State.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "action:(int -> 'T -> 'State -> unit * 'State) -> list:list<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "map<'State, 'Tag1, 'Tag2>",
                    "class_name": "TagSet",
                    "namespace": "ExtCore.Control.Collections.State.TagSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:(int<'Tag1> -> 'State -> int<'Tag2> * 'State) -> set:TagSet<'Tag1> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "TagSet<'Tag2> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "map<'T, 'State, 'U, 'Error>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Control.Collections.StatefulChoice.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> Choice<'U, 'Error> * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "Choice<'U[], 'Error> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "map<'T, 'State, 'U>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Control.Collections.State.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'U * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U[] * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "map<'T, 'State, 'U>",
                    "class_name": "ArrayView",
                    "namespace": "ExtCore.Control.Collections.State.ArrayView"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'U * 'State) -> view:ArrayView<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U[] * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "map<'T, 'State, 'U>",
                    "class_name": "HashSet",
                    "namespace": "ExtCore.Control.Collections.State.HashSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'U * 'State) -> set:HashSet<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "HashSet<'U> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison and 'U : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "map<'T, 'State, 'U>",
                    "class_name": "List",
                    "namespace": "ExtCore.Control.Collections.State.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'U * 'State) -> list:list<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "list<'U> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "map<'T, 'State, 'U>",
                    "class_name": "Set",
                    "namespace": "ExtCore.Control.Collections.State.Set"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'U * 'State) -> set:Set<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "Set<'U> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison and 'U : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapBack<'State, 'Tag1, 'Tag2>",
                    "class_name": "TagSet",
                    "namespace": "ExtCore.Control.Collections.State.TagSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:(int<'Tag1> -> 'State -> int<'Tag2> * 'State) -> set:TagSet<'Tag1> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "TagSet<'Tag2> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapBack<'T, 'State, 'U>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Control.Collections.State.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'U * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U[] * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapBack<'T, 'State, 'U>",
                    "class_name": "HashSet",
                    "namespace": "ExtCore.Control.Collections.State.HashSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'U * 'State) -> set:HashSet<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "HashSet<'U> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison and 'U : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapBack<'T, 'State, 'U>",
                    "class_name": "Set",
                    "namespace": "ExtCore.Control.Collections.State.Set"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'U * 'State) -> set:Set<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "Set<'U> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison and 'U : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapFold<'T, 'State, 'Result>",
                    "class_name": "Array",
                    "namespace": "Microsoft.FSharp.Collections.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('State -> 'T -> 'Result * 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> array:'T[] -> ",
                        "color_id": null
                    },
                    {
                        "name": "'Result[] * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Combines map and fold. Builds a new array whose elements are the results of applying the given function to each of the elements of the input array. The function is also used to accumulate a final value.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/array.mapfold%5b%27t%2c%27state%2c%27result%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapFold<'T, 'State, 'Result>",
                    "class_name": "List",
                    "namespace": "Microsoft.FSharp.Collections.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('State -> 'T -> 'Result * 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> list:list<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "list<'Result> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Combines map and fold. Builds a new list whose elements are the results of applying the given function to each of the elements of the input list. The function is also used to accumulate a final value.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/list.mapfold%5b%27t%2c%27state%2c%27result%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapFold<'T, 'State, 'Result>",
                    "class_name": "Seq",
                    "namespace": "Microsoft.FSharp.Collections.Seq"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('State -> 'T -> 'Result * 'State) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> source:seq<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "seq<'Result> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Combines map and fold. Builds a new collection whose elements are the results of applying the given function to each of the elements of the collection. The function is also used to accumulate a final value.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/seq.mapfold%5b%27t%2c%27state%2c%27result%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapFold<'a, 'T, 'b>",
                    "class_name": "NameMap",
                    "namespace": "Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.NameMap"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a -> string -> 'T -> 'b * 'a) -> s:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> l:NameMap<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "Map<string, 'b> * 'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapFold<'a, 'b, 'c>",
                    "class_name": "Option",
                    "namespace": "Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.Option"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a -> 'b -> 'c * 'a) -> s:",
                        "color_id": null
                    },
                    {
                        "name": "'a",
                        "color_id": 0
                    },
                    {
                        "name": " -> opt:option<'b> -> ",
                        "color_id": null
                    },
                    {
                        "name": "option<'c> * 'a",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapFoldBack<'T, 'State, 'Result>",
                    "class_name": "Array",
                    "namespace": "Microsoft.FSharp.Collections.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'Result * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'Result[] * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Combines map and foldBack. Builds a new array whose elements are the results of applying the given function to each of the elements of the input array. The function is also used to accumulate a final value.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/array.mapfoldback%5b%27t%2c%27state%2c%27result%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapFoldBack<'T, 'State, 'Result>",
                    "class_name": "List",
                    "namespace": "Microsoft.FSharp.Collections.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'Result * 'State) -> list:list<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "list<'Result> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Combines map and foldBack. Builds a new list whose elements are the results of applying the given function to each of the elements of the input list. The function is also used to accumulate a final value.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/list.mapfoldback%5b%27t%2c%27state%2c%27result%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapFoldBack<'T, 'State, 'Result>",
                    "class_name": "Seq",
                    "namespace": "Microsoft.FSharp.Collections.Seq"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'State -> 'Result * 'State) -> source:seq<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "seq<'Result> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Combines map and foldBack. Builds a new collection whose elements are the results of applying the given function to each of the elements of the collection. The function is also used to accumulate a final value.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/seq.mapfoldback%5b%27t%2c%27state%2c%27result%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapFoldSquared<'a2, 'a3, 'a4>",
                    "class_name": "List",
                    "namespace": "Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a2 -> 'a3 -> 'a4 * 'a2) -> z:",
                        "color_id": null
                    },
                    {
                        "name": "'a2",
                        "color_id": 0
                    },
                    {
                        "name": " -> xss:list<list<'a3>> -> ",
                        "color_id": null
                    },
                    {
                        "name": "list<list<'a4>> * 'a2",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapi<'T, 'State, 'U, 'Tag>",
                    "class_name": "TaggedArray",
                    "namespace": "ExtCore.Control.Collections.State.TaggedArray"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:(int<'Tag> -> 'T -> 'State -> 'U * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U[] * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapi<'T, 'State, 'U>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Control.Collections.State.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:(int -> 'T -> 'State -> 'U * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U[] * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapi<'T, 'State, 'U>",
                    "class_name": "ArrayView",
                    "namespace": "ExtCore.Control.Collections.State.ArrayView"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:(int -> 'T -> 'State -> 'U * 'State) -> view:ArrayView<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U[] * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapi<'T, 'State, 'U>",
                    "class_name": "List",
                    "namespace": "ExtCore.Control.Collections.State.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:(int -> 'T -> 'State -> 'U * 'State) -> list:list<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "list<'U> * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapiBack<'T, 'State, 'U, 'Tag>",
                    "class_name": "TaggedArray",
                    "namespace": "ExtCore.Control.Collections.State.TaggedArray"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:(int<'Tag> -> 'T -> 'State -> 'U * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U[] * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapiBack<'T, 'State, 'U>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Control.Collections.State.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:(int -> 'T -> 'State -> 'U * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U[] * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "mapiFoldSquared<'a2, 'a3, 'a4>",
                    "class_name": "List",
                    "namespace": "Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.List"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a2 -> int * int * 'a3 -> 'a4 * 'a2) -> z:",
                        "color_id": null
                    },
                    {
                        "name": "'a2",
                        "color_id": 0
                    },
                    {
                        "name": " -> xss:list<list<'a3>> -> ",
                        "color_id": null
                    },
                    {
                        "name": "list<list<'a4>> * 'a2",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "maxWith<'T, 'U>",
                    "class_name": "Operators",
                    "namespace": "ExtCore.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'U) -> x:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:'T -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'U : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "minWith<'T, 'U>",
                    "class_name": "Operators",
                    "namespace": "ExtCore.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'U) -> x:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:'T -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'U : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "readonly<'State, 'T>",
                    "class_name": "State",
                    "namespace": "ExtCore.Control.State"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "reader:('State -> 'T) -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "remove",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "key:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> set:IntSet -> ",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "run<'State, 'T, 'K>",
                    "class_name": "StateCont",
                    "namespace": "ExtCore.Control.Cps.StateCont"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "stateFunc:StateContFunc<'State, 'T, 'K> -> initialState:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> cont:('T * 'State -> 'K) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'K",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "run<'State, 'T>",
                    "class_name": "State",
                    "namespace": "ExtCore.Control.State"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "stateFunc:StateFunc<'State, 'T> -> initialState:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "setState<'State, 'Env>",
                    "class_name": "ReaderState",
                    "namespace": "ExtCore.Control.ReaderState"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> 'Env -> 'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "unit * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "setState<'State, 'K>",
                    "class_name": "StateCont",
                    "namespace": "ExtCore.Control.Cps.StateCont"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> 'State -> cont:(unit * 'State -> 'K) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'K",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ticksUTC",
                    "class_name": "DateTime",
                    "namespace": "Suave.Logging.DateTime"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "epoch:",
                        "color_id": null
                    },
                    {
                        "name": "EpochNanoSeconds",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "Get the DateTimeOffset ticks off from the EpochNanoSeconds.",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "ticksUTC",
                    "class_name": "DateTimeOffset",
                    "namespace": "Suave.Logging.DateTimeOffset"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "epoch:",
                        "color_id": null
                    },
                    {
                        "name": "EpochNanoSeconds",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "Get the DateTimeOffset ticks from EpochNanoSeconds",
                "link": ""
            }
        },
        {
            "distance": 4,
            "api": {
                "name": {
                    "id": "uncurry<'a, 'b, 'c>",
                    "class_name": "YoLo",
                    "namespace": "YoLo"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "f:('a -> 'b -> 'c) -> a:'a * b:'b -> ",
                        "color_id": null
                    },
                    {
                        "name": "'c",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "Suave",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "( <||| )<'T1, 'T2, 'T3, 'U>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "func:('T1 -> 'T2 -> 'T3 -> 'U) -> arg1:'T1 * arg2:'T2 * arg3:'T3 -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Apply a function to three values, the values being a triple on the right, the function on the left",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-%5bhhh-%5d%5b%27t1%2c%27t2%2c%27t3%2c%27u%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "( |||> )<'T1, 'T2, 'T3, 'U>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "arg1:'T1 * arg2:'T2 * arg3:'T3 -> func:('T1 -> 'T2 -> 'T3 -> 'U) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Apply a function to three values, the values being a triple on the left, the function on the right",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-hhh%5d-%5d%5b%27t1%2c%27t2%2c%27t3%2c%27u%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "Decrement",
                    "class_name": "Interlocked",
                    "namespace": "System.Threading.Interlocked"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int64>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Decrements the specified variable and stores the result, as an atomic operation.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked.decrement?view=netframework-4.7#System_Threading_Interlocked_Decrement_System_Int64__"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "EnsureInitialized<'T>",
                    "class_name": "LazyInitializer",
                    "namespace": "System.Threading.LazyInitializer"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "target:",
                        "color_id": null
                    },
                    {
                        "name": "byref<'T>",
                        "color_id": 0
                    },
                    {
                        "name": " * initialized:byref<bool> * syncLock:byref<obj> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Initializes a target reference or value type with its default constructor if it hasn't already been initialized.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.lazyinitializer.ensureinitialized?view=netframework-4.7#System_Threading_LazyInitializer_EnsureInitialized__1___0__System_Boolean__System_Object__"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "GetHashCode",
                    "class_name": "UIntPtr",
                    "namespace": "System.UIntPtr"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the hash code for this instance.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.uintptr.gethashcode?view=netframework-4.7#System_UIntPtr_GetHashCode"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "Increment",
                    "class_name": "Interlocked",
                    "namespace": "System.Threading.Interlocked"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int64>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Increments a specified variable and stores the result, as an atomic operation.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked.increment?view=netframework-4.7#System_Threading_Interlocked_Increment_System_Int64__"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "InvokeFast<'V>",
                    "class_name": "FSharpFunc<'T, 'U>",
                    "namespace": "Microsoft.FSharp.Core.FSharpFunc<'T, 'U>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "func:FSharpFunc<'T, 'U -> 'V> * arg1:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * arg2:'U -> ",
                        "color_id": null
                    },
                    {
                        "name": "'V",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Core",
                "xml_doc": "Invoke an F# first class function value with two curried arguments. In some cases this will result in a more efficient application than applying the arguments successively.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/fsharpfunc.invokefast%5b%27v%2c%27t%2c%27u%5d-method-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "Pick<'T>",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "picker:(int -> option<'T>) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "Read",
                    "class_name": "Interlocked",
                    "namespace": "System.Threading.Interlocked"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int64>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns a 64-bit value, loaded as an atomic operation.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked.read?view=netframework-4.7#System_Threading_Interlocked_Read_System_Int64__"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "Read",
                    "class_name": "Volatile",
                    "namespace": "System.Threading.Volatile"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int16>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.volatile.read?view=netframework-4.7#System_Threading_Volatile_Read_System_Int16__"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "Read",
                    "class_name": "Volatile",
                    "namespace": "System.Threading.Volatile"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "location:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int64>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.volatile.read?view=netframework-4.7#System_Threading_Volatile_Read_System_Int64__"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ReadInt16",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads a 16-bit signed integer from unmanaged memory.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.readint16?view=netframework-4.7#System_Runtime_InteropServices_Marshal_ReadInt16_System_IntPtr_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ReadInt32",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " * ofs:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads a 32-bit signed integer at a given offset from unmanaged memory.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.readint32?view=netframework-4.7#System_Runtime_InteropServices_Marshal_ReadInt32_System_IntPtr_System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ReadInt64",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads a 64-bit signed integer from unmanaged memory.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.readint64?view=netframework-4.7#System_Runtime_InteropServices_Marshal_ReadInt64_System_IntPtr_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ReadIntPtr",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:obj * ofs:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads a processor native sized integer from unmanaged memory.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.readintptr?view=netframework-4.7#System_Runtime_InteropServices_Marshal_ReadIntPtr_System_Object_System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "TakeFromAny",
                    "class_name": "BlockingCollection<'T>",
                    "namespace": "System.Collections.Concurrent.BlockingCollection<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "collections:BlockingCollection<'T>[] * item:",
                        "color_id": null
                    },
                    {
                        "name": "byref<'T>",
                        "color_id": 0
                    },
                    {
                        "name": " * cancellationToken:CancellationToken -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Takes an item from any one of the specified  instances while observing the specified cancellation token.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.takefromany?view=netframework-4.7#System_Collections_Concurrent_BlockingCollection_1_TakeFromAny_System_Collections_Concurrent_BlockingCollection__0_____0__System_Threading_CancellationToken_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint16?view=netframework-4.7#System_Convert_ToInt16_System_UInt32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint16?view=netframework-4.7#System_Convert_ToInt16_System_UInt64_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint16?view=netframework-4.7#System_Convert_ToInt16_System_UInt16_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint64?view=netframework-4.7#System_Convert_ToInt64_System_UInt64_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint64?view=netframework-4.7#System_Convert_ToInt64_System_UInt32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.toint64?view=netframework-4.7#System_Convert_ToInt64_System_UInt16_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToTuple<'T1, 'T2, 'T3>",
                    "class_name": "TupleExtensions",
                    "namespace": "System.TupleExtensions"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "(struct ('T1 * 'T2 * 'T3))",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T1 * 'T2 * 'T3",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts an instance of the  structure to an instance of the   class.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.tupleextensions.totuple?view=netframework-4.7#System_TupleExtensions_ToTuple__3__"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt16",
                    "class_name": "BitConverter",
                    "namespace": "System.BitConverter"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:byte[] * startIndex:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.bitconverter.touint16?view=netframework-4.7#System_BitConverter_ToUInt16_System_Byte___System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint16?view=netframework-4.7#System_Convert_ToUInt16_System_Int64_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint16?view=netframework-4.7#System_Convert_ToUInt16_System_Int16_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:string * fromBase:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint16?view=netframework-4.7#System_Convert_ToUInt16_System_String_System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt32",
                    "class_name": "BitConverter",
                    "namespace": "System.BitConverter"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:byte[] * startIndex:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.bitconverter.touint32?view=netframework-4.7#System_BitConverter_ToUInt32_System_Byte___System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:string * fromBase:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint32?view=netframework-4.7#System_Convert_ToUInt32_System_String_System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint32?view=netframework-4.7#System_Convert_ToUInt32_System_Int64_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint32?view=netframework-4.7#System_Convert_ToUInt32_System_Int16_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt64",
                    "class_name": "BitConverter",
                    "namespace": "System.BitConverter"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:byte[] * startIndex:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.bitconverter.touint64?view=netframework-4.7#System_BitConverter_ToUInt64_System_Byte___System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint64?view=netframework-4.7#System_Convert_ToUInt64_System_Int16_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:string * fromBase:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint64?view=netframework-4.7#System_Convert_ToUInt64_System_String_System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToUInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint64?view=netframework-4.7#System_Convert_ToUInt64_System_Int64_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "ToValueTuple<'T1, 'T2, 'T3>",
                    "class_name": "TupleExtensions",
                    "namespace": "System.TupleExtensions"
                },
                "kind": "extension member",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "('T1 * 'T2 * 'T3)",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "struct ('T1 * 'T2 * 'T3)",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts an instance of the  class to an instance of the   structure.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.tupleextensions.tovaluetuple?view=netframework-4.7#System_TupleExtensions_ToValueTuple__3__"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "TryTakeFromAny",
                    "class_name": "BlockingCollection<'T>",
                    "namespace": "System.Collections.Concurrent.BlockingCollection<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "collections:BlockingCollection<'T>[] * item:",
                        "color_id": null
                    },
                    {
                        "name": "byref<'T>",
                        "color_id": 0
                    },
                    {
                        "name": " * timeout:TimeSpan -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Tries to remove an item from any one of the specified  instances.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.trytakefromany?view=netframework-4.7#System_Collections_Concurrent_BlockingCollection_1_TryTakeFromAny_System_Collections_Concurrent_BlockingCollection__0_____0__System_TimeSpan_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "TryTakeFromAny",
                    "class_name": "BlockingCollection<'T>",
                    "namespace": "System.Collections.Concurrent.BlockingCollection<'T>"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "collections:BlockingCollection<'T>[] * item:",
                        "color_id": null
                    },
                    {
                        "name": "byref<'T>",
                        "color_id": 0
                    },
                    {
                        "name": " * millisecondsTimeout:int -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "System",
                "xml_doc": "Tries to remove an item from any one of the specified  instances.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.trytakefromany?view=netframework-4.7#System_Collections_Concurrent_BlockingCollection_1_TryTakeFromAny_System_Collections_Concurrent_BlockingCollection__0_____0__System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "UnsafeAddrOfPinnedArrayElement",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "arr:Array * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Gets the address of the element at the specified index inside the specified array.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.unsafeaddrofpinnedarrayelement?view=netframework-4.7#System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement_System_Array_System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "UnsafeAddrOfPinnedArrayElement<'T>",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "arr:'T[] * index:",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "[Supported in the .NET Framework 4.5.1 and later versions] Gets the address of the element at the specified index in an array of a specified type.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.unsafeaddrofpinnedarrayelement?view=netframework-4.7#System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement__1___0___System_Int32_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "VolatileRead",
                    "class_name": "Thread",
                    "namespace": "System.Threading.Thread"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "address:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int16>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.volatileread?view=netframework-4.7#System_Threading_Thread_VolatileRead_System_Int16__"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "VolatileRead",
                    "class_name": "Thread",
                    "namespace": "System.Threading.Thread"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "address:",
                        "color_id": null
                    },
                    {
                        "name": "byref<int64>",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.volatileread?view=netframework-4.7#System_Threading_Thread_VolatileRead_System_Int64__"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "bindChoice<'T, 'State, 'U, 'a>",
                    "class_name": "State",
                    "namespace": "ExtCore.Control.State"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "k:('T -> StateFunc<'State, 'U>) -> m:ProtectedStateFunc<'State, 'T, 'a> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'a :> Exception",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "card<'T>",
                    "class_name": "Multiset",
                    "namespace": "ExtCore.Collections.Multiset"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " -> set:Multiset<'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when 'T : comparison",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "dive<'d, 'e, 'f>",
                    "class_name": "AstTraversal",
                    "namespace": "Microsoft.FSharp.Compiler.SourceCodeServices.AstTraversal"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "node:",
                        "color_id": null
                    },
                    {
                        "name": "'d",
                        "color_id": 0
                    },
                    {
                        "name": " -> range:'e -> project:('d -> 'f) -> ",
                        "color_id": null
                    },
                    {
                        "name": "'e * unit -> 'f",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "FSharp.Compiler.Service",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "liftReader<'Env, 'T, 'State>",
                    "class_name": "ReaderState",
                    "namespace": "ExtCore.Control.ReaderState"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "readerFunc:ReaderFunc<'Env, 'T> -> env:",
                        "color_id": null
                    },
                    {
                        "name": "'Env",
                        "color_id": 0
                    },
                    {
                        "name": " -> 'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T * StateBuilder",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "liftState<'State, 'T, 'Env>",
                    "class_name": "ReaderState",
                    "namespace": "ExtCore.Control.ReaderState"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "stateFunc:StateFunc<'State, 'T> -> ",
                        "color_id": null
                    },
                    {
                        "name": "'Env",
                        "color_id": 0
                    },
                    {
                        "name": " -> state:'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "map<'T, 'U, 'State>",
                    "class_name": "State",
                    "namespace": "ExtCore.Control.State"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "mapping:('T -> 'U) -> stateFunc:StateFunc<'State, 'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "nativeint<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> nativeint)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to signed native integer. This is a direct conversion for all  primitive numeric types. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.nativeint%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "nativeint<^T>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> nativeint)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to nativeint. This is a direct, checked conversion for all  primitive numeric types. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.nativeint%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "new",
                    "class_name": "IntPtr",
                    "namespace": "System.IntPtr"
                },
                "kind": "constructor",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "IntPtr",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Initializes a new instance of  using the specified 64-bit pointer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.intptr.-ctor?view=netframework-4.7#System_IntPtr__ctor_System_Int64_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "op_Explicit",
                    "class_name": "IntPtr",
                    "namespace": "System.IntPtr"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.intptr.op_explicit?view=netframework-4.7#System_IntPtr_op_Explicit_System_Int64_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "op_Explicit",
                    "class_name": "IntPtr",
                    "namespace": "System.IntPtr"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.intptr.op_explicit?view=netframework-4.7#System_IntPtr_op_Explicit_System_IntPtr_"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "pick<'T>",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "picker:(int -> option<'T>) -> set:",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "reduce<'T, 'State>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Control.Collections.State.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "reduction:('T -> 'T -> 'State -> 'T * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "reduce<'T, 'State>",
                    "class_name": "ArrayView",
                    "namespace": "ExtCore.Control.Collections.State.ArrayView"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "reduction:('T -> 'T -> 'State -> 'T * 'State) -> view:ArrayView<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "reduceBack<'T, 'State>",
                    "class_name": "Array",
                    "namespace": "ExtCore.Control.Collections.State.Array"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "reduction:('T -> 'T -> 'State -> 'T * 'State) -> array:'T[] -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "reduceBack<'T, 'State>",
                    "class_name": "ArrayView",
                    "namespace": "ExtCore.Control.Collections.State.ArrayView"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "reduction:('T -> 'T -> 'State -> 'T * 'State) -> view:ArrayView<'T> -> state:",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "run<'Env, 'State, 'T>",
                    "class_name": "ReaderState",
                    "namespace": "ExtCore.Control.ReaderState"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "readerStateFunc:ReaderStateFunc<'Env, 'State, 'T> -> env:",
                        "color_id": null
                    },
                    {
                        "name": "'Env",
                        "color_id": 0
                    },
                    {
                        "name": " -> initialState:'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T * 'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "swap<'T, 'U>",
                    "class_name": "Operators",
                    "namespace": "ExtCore.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "'T",
                        "color_id": 0
                    },
                    {
                        "name": " * y:'U -> ",
                        "color_id": null
                    },
                    {
                        "name": "'U * 'T",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "uint16<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> uint16)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to unsigned 16-bit integer. This is a direct conversion for all  primitive numeric types. For strings, the input is converted using UInt16.Parse()   with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.uint16%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "uint16<^T>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> uint16)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to uint16. This is a direct, checked conversion for all  primitive numeric types. For strings, the input is converted using System.UInt16.Parse()  with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.uint16%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "uint32<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> uint32)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to unsigned 32-bit integer. This is a direct conversion for all  primitive numeric types. For strings, the input is converted using UInt32.Parse()   with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.uint32%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "uint32<^T>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> uint32)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to uint32. This is a direct, checked conversion for all  primitive numeric types. For strings, the input is converted using System.UInt32.Parse()  with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.uint32%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "uint64<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> uint64)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to unsigned 64-bit integer. This is a direct conversion for all  primitive numeric types. For strings, the input is converted using UInt64.Parse()   with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.uint64%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "uint64<^T>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> uint64)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to uint64. This is a direct, checked conversion for all  primitive numeric types. For strings, the input is converted using System.UInt64.Parse()  with InvariantCulture settings. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.uint64%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 5,
            "api": {
                "name": {
                    "id": "value__",
                    "class_name": "LoadHint",
                    "namespace": "System.Runtime.CompilerServices.LoadHint"
                },
                "kind": "instance field",
                "signature": [
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.loadhint.value__?view=netframework-4.7#System_Runtime_CompilerServices_LoadHint_value__"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "( % )<^T1, ^T2, ^T3>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T3",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when (^T1 or ^T2) : (static member op_Modulus : ^T1 * ^T2 -> ^T3)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded modulo operator",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5br-%5d%5b%5et1%2c%5et2%2c%5et3%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "( * )<^T1, ^T2, ^T3>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T3",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when (^T1 or ^T2) : (static member op_Multiply : ^T1 * ^T2 -> ^T3)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded multiplication operator",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-a-%5d%5b%5et1%2c%5et2%2c%5et3%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "( * )<^T1, ^T2, ^T3>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T3",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when (^T1 or ^T2) : (static member op_Multiply : ^T1 * ^T2 -> ^T3)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded multiplication operator (checks for overflow)",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.%5b-a-%5d%5b%5et1%2c%5et2%2c%5et3%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "( + )<^T1, ^T2, ^T3>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T3",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when (^T1 or ^T2) : (static member op_Addition : ^T1 * ^T2 -> ^T3)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded addition operator",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-p-%5d%5b%5et1%2c%5et2%2c%5et3%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "( + )<^T1, ^T2, ^T3>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T3",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when (^T1 or ^T2) : (static member op_Addition : ^T1 * ^T2 -> ^T3)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded addition operator (checks for overflow)",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.%5b-p-%5d%5b%5et1%2c%5et2%2c%5et3%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "( - )<^T1, ^T2, ^T3>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T3",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when (^T1 or ^T2) : (static member op_Subtraction : ^T1 * ^T2 -> ^T3)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded subtraction operator",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-%5d%5b%5et1%2c%5et2%2c%5et3%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "( - )<^T1, ^T2, ^T3>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T3",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when (^T1 or ^T2) : (static member op_Subtraction : ^T1 * ^T2 -> ^T3)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded subtraction operator (checks for overflow)",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.%5b-%5d%5b%5et1%2c%5et2%2c%5et3%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "( / )<^T1, ^T2, ^T3>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "x:",
                        "color_id": null
                    },
                    {
                        "name": "^T1",
                        "color_id": 0
                    },
                    {
                        "name": " -> y:^T2 -> ",
                        "color_id": null
                    },
                    {
                        "name": "^T3",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when (^T1 or ^T2) : (static member op_Division : ^T1 * ^T2 -> ^T3)",
                "assembly": "FSharp.Core",
                "xml_doc": "Overloaded division operator",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-s-%5d%5b%5et1%2c%5et2%2c%5et3%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "AllocHGlobal",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "cb:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.allochglobal?view=netframework-4.7#System_Runtime_InteropServices_Marshal_AllocHGlobal_System_IntPtr_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "Create<'T1, 'T2, 'T3>",
                    "class_name": "Tuple",
                    "namespace": "System.Tuple"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "item1:",
                        "color_id": null
                    },
                    {
                        "name": "'T1",
                        "color_id": 0
                    },
                    {
                        "name": " * item2:'T2 * item3:'T3 -> ",
                        "color_id": null
                    },
                    {
                        "name": "'T1 * 'T2 * 'T3",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Creates a new 3-tuple, or triple.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.tuple.create?view=netframework-4.7#System_Tuple_Create__3___0___1___2_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "Create<'T1, 'T2, 'T3>",
                    "class_name": "ValueTuple",
                    "namespace": "System.ValueTuple"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "item1:",
                        "color_id": null
                    },
                    {
                        "name": "'T1",
                        "color_id": 0
                    },
                    {
                        "name": " * item2:'T2 * item3:'T3 -> ",
                        "color_id": null
                    },
                    {
                        "name": "struct ('T1 * 'T2 * 'T3)",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Creates a new value tuple with 8 components (a triple).",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.valuetuple.create?view=netframework-4.7#System_ValueTuple_Create__3___0___1___2_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "Max",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "val1:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " * val2:int64 -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the larger of two 64-bit signed integers.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.max?view=netframework-4.7#System_Math_Max_System_Int64_System_Int64_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "Max",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "val1:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " * val2:int16 -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the larger of two 16-bit signed integers.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.max?view=netframework-4.7#System_Math_Max_System_Int16_System_Int16_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "Min",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "val1:",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 0
                    },
                    {
                        "name": " * val2:int64 -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the smaller of two 64-bit signed integers.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.min?view=netframework-4.7#System_Math_Min_System_Int64_System_Int64_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "Min",
                    "class_name": "Math",
                    "namespace": "System.Math"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "val1:",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 0
                    },
                    {
                        "name": " * val2:int16 -> ",
                        "color_id": null
                    },
                    {
                        "name": "int16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the smaller of two 16-bit signed integers.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.math.min?view=netframework-4.7#System_Math_Min_System_Int16_System_Int16_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "QueryInterface",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "pUnk:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " * iid:byref<Guid> * ppv:byref<nativeint> -> ",
                        "color_id": null
                    },
                    {
                        "name": "int",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Requests a pointer to a specified interface from a COM object.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.queryinterface?view=netframework-4.7#System_Runtime_InteropServices_Marshal_QueryInterface_System_IntPtr_System_Guid__System_IntPtr__"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ReadIntPtr",
                    "class_name": "Marshal",
                    "namespace": "System.Runtime.InteropServices.Marshal"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "ptr:",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "nativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Reads a processor native-sized integer from unmanaged memory.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.readintptr?view=netframework-4.7#System_Runtime_InteropServices_Marshal_ReadIntPtr_System_IntPtr_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ToInt64",
                    "class_name": "IntPtr",
                    "namespace": "System.IntPtr"
                },
                "kind": "instance method",
                "signature": [
                    {
                        "name": "unit -> ",
                        "color_id": null
                    },
                    {
                        "name": "int64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of this instance to a 64-bit signed integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.intptr.toint64?view=netframework-4.7#System_IntPtr_ToInt64"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ToUInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint16?view=netframework-4.7#System_Convert_ToUInt16_System_UInt64_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ToUInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint16?view=netframework-4.7#System_Convert_ToUInt16_System_UInt32_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ToUInt16",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the specified 16-bit unsigned integer; no actual conversion is performed.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint16?view=netframework-4.7#System_Convert_ToUInt16_System_UInt16_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ToUInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the specified 32-bit unsigned integer; no actual conversion is performed.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint32?view=netframework-4.7#System_Convert_ToUInt32_System_UInt32_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ToUInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint32?view=netframework-4.7#System_Convert_ToUInt32_System_UInt16_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ToUInt32",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint32?view=netframework-4.7#System_Convert_ToUInt32_System_UInt64_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ToUInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint32",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint64?view=netframework-4.7#System_Convert_ToUInt64_System_UInt32_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ToUInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Returns the specified 64-bit unsigned integer; no actual conversion is performed.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint64?view=netframework-4.7#System_Convert_ToUInt64_System_UInt64_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "ToUInt64",
                    "class_name": "Convert",
                    "namespace": "System.Convert"
                },
                "kind": "static method",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "uint16",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "uint64",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "mscorlib",
                "xml_doc": "Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint64?view=netframework-4.7#System_Convert_ToUInt64_System_UInt16_"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "foldBack<'State>",
                    "class_name": "IntSet",
                    "namespace": "ExtCore.Collections.IntSet"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "folder:(int -> 'State -> 'State) -> set:",
                        "color_id": null
                    },
                    {
                        "name": "IntSet",
                        "color_id": 0
                    },
                    {
                        "name": " -> state:'State -> ",
                        "color_id": null
                    },
                    {
                        "name": "'State",
                        "color_id": 1
                    }
                ],
                "type_constraints": "",
                "assembly": "ExtCore",
                "xml_doc": "",
                "link": ""
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "unativeint<^T>",
                    "class_name": "Operators",
                    "namespace": "Microsoft.FSharp.Core.Operators"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> unativeint)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to unsigned native integer using a direct conversion for all  primitive numeric types. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.unativeint%5b%5et%5d-function-%5bfsharp%5d"
            }
        },
        {
            "distance": 6,
            "api": {
                "name": {
                    "id": "unativeint<^T>",
                    "class_name": "Checked",
                    "namespace": "Microsoft.FSharp.Core.Operators.Checked"
                },
                "kind": "module value",
                "signature": [
                    {
                        "name": "value:",
                        "color_id": null
                    },
                    {
                        "name": "^T",
                        "color_id": 0
                    },
                    {
                        "name": " -> ",
                        "color_id": null
                    },
                    {
                        "name": "unativeint",
                        "color_id": 1
                    }
                ],
                "type_constraints": "when ^T : (static member op_Explicit : ^T -> unativeint)",
                "assembly": "FSharp.Core",
                "xml_doc": "Converts the argument to unativeint. This is a direct, checked conversion for all  primitive numeric types. Otherwise the operation requires an appropriate static conversion method on the input type.",
                "link": "https://msdn.microsoft.com/visualfsharpdocs/conceptual/checked.unativeint%5b%5et%5d-function-%5bfsharp%5d"
            }
        }
    ],
    "query": [
        {
            "name": "int",
            "color_id": 0
        },
        {
            "name": "->",
            "color_id": null
        },
        {
            "name": "int",
            "color_id": 1
        }
    ]
}