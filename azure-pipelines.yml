name: $(Rev:r)
jobs:
- job: Windows
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - powershell: |
      $buildId = $env:BUILD_BUILDNUMBER.PadLeft(7, '0');
      $versionSuffixPR = "-PR$($env:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER)-$buildId";
      $branchName = "$env:BUILD_SOURCEBRANCHNAME".Replace("_","");
      $versionSuffixBRANCH = "-$branchName-$buildId";
      $isTag = "$env:BUILD_SOURCEBRANCH".StartsWith('refs/tags/');
      $isPR = "$env:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER" -ne ""
      $versionSuffix = if ($isTag) { "" } else { if ($isPR) { $versionSuffixPR } else { $versionSuffixBRANCH } };
      Write-Host "##vso[task.setvariable variable=VersionSuffix]$versionSuffix";
  - script: build.cmd All
    displayName: build All
    env:
      VersionSuffix: '$(VersionSuffix)'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'bin/pkgs'
      artifactName: 'pkgs'
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: echo "##vso[task.setvariable variable=FrameworkPathOverride]$(dirname $(which mono))/../lib/mono/4.5/"
    displayName: Workaround .NET reference assemblies on linux
  - script: build.cmd All
    displayName: build All
    env:
      VersionSuffix: '$(VersionSuffix)'
- job: MacOS
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - script: echo "##vso[task.setvariable variable=FrameworkPathOverride]$(dirname $(which mono))/../lib/mono/4.5/"
    displayName: Workaround .NET reference assemblies on linux
  - script: build.cmd All
    displayName: build All
    env:
      VersionSuffix: '$(VersionSuffix)'
